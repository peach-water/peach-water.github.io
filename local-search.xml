<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>学习-VTR开源软件开发环境安装</title>
    <link href="/2025/06/12/%E5%AD%A6%E4%B9%A0-VTR%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"/>
    <url>/2025/06/12/%E5%AD%A6%E4%B9%A0-VTR%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>检查宿主机是否支持<code>perf</code>指令，如果不能，则有关调试加速<code>rr-debug</code>的部分无法使用。安装教程参考<a href="https://blog.csdn.net/z1026544682/article/details/115329534">CNBLOG</a>。<ul><li>如果是Docker容器启动，在启动镜像前最好设置<code>--cap-add SYS_ADMIN</code>，从而可以正常使用<code>rr-debug</code>。不建议使用较老的系统，还要自行折腾gcc的升级。另外<code>SYS_ADMIN</code>可能不符合最小权限原则，自行考量。</li><li>如果是虚拟机，可尝试在虚拟机内部安装并使用perf工具。检查是否正常工作，运行<code>perf --help</code>是否正常显示所有帮助信息。</li></ul></li><li>检查环境中<code>gcc</code>的版本，运行<code>gcc -version</code>返回的版本号需要<code>&gt;=10</code>。如果是<code>clang</code>则需要<code>&gt;=11</code>。</li><li>全程最好有github访问支持，以防止网络问题导致编译失败。</li></ul><blockquote><p>本教程以VTR其中一个子模块VPR为目标。记录VPR二次开发的环境搭建过程。</p></blockquote><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="docker启动"><a href="#docker启动" class="headerlink" title="docker启动"></a>docker启动</h2><blockquote><p>如果是虚拟机可以跳过这个小章节。<br>我们以ubuntu:22.04基础镜像为例：</p></blockquote><ul><li><code>--cap-add SYS_ADMIN</code>允许docker容器使用<code>perf</code>指令，这对于之后<code>rr-debug</code>安装重要。<ul><li>再次提醒：检查宿主机是否支持使用perf指令，否则docker内部仍然无法使用。之后rr-debug也无法使用，这条指令毫无意义。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --cap-add SYS_ADMIN -itd -p 8022:22 --name=<span class="hljs-string">&quot;VPR&quot;</span> ubuntu:22.04 /bin/bash<br>docker <span class="hljs-built_in">exec</span> -it VPR /bin/bash<br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><p>需要安装基础编译环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt update<br><span class="hljs-comment"># cmake可能需要安装</span><br>apt install -y cmake <br><span class="hljs-comment"># 工具链编译环境</span><br>apt install -y bison flex zlib1g zlib1g-dev tcl8.6-dev libreadline-dev libffi-dev libtbb-dev pkg-config<br><span class="hljs-comment"># 其他工具</span><br>apt install -y ccache git wget curl <br><span class="hljs-comment"># 如果系统存在的gcc编译器满足前面提到的要求，这条命令可忽略</span><br>apt install -y gcc-11 g++-11 <br><span class="hljs-comment"># 以下这条指令与rr-debug相关，自行决定是否安装。需要在实体机上执行</span><br>apt-get install linux-tools-common linux-tools-$(<span class="hljs-built_in">uname</span> -r) <span class="hljs-comment"># rr 调试器需要使用到 perf 工具</span><br></code></pre></td></tr></table></figure><h2 id="拉取并编译项目代码"><a href="#拉取并编译项目代码" class="headerlink" title="拉取并编译项目代码"></a>拉取并编译项目代码</h2><blockquote><p>作者演示的代码仅包含VTR模块中的VPR软件子集。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/verilog-to-routing/vtr-verilog-to-routing.git<br><span class="hljs-built_in">cd</span> VLSI-FPGA<br><span class="hljs-built_in">mkdir</span> build<br>sh make.sh<br></code></pre></td></tr></table></figure><blockquote><p>编译期间需要访问github获得资源，需要保证网络通畅。</p></blockquote><p>如果看到以下运行结果说明编译成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">[ 98%] Building CXX object vpr/CMakeFiles/libvpr.dir/src/timing/read_sdc.cpp.o<br>[100%] Building CXX object vpr/CMakeFiles/libvpr.dir/src/timing/slack_evaluation.cpp.o<br>[100%] Building CXX object vpr/CMakeFiles/libvpr.dir/src/timing/timing_fail_error.cpp.o<br>[100%] Building CXX object vpr/CMakeFiles/libvpr.dir/src/timing/timing_util.cpp.o<br>[100%] Building CXX object vpr/CMakeFiles/libvpr.dir/src/util/hash.cpp.o<br>[100%] Building CXX object vpr/CMakeFiles/libvpr.dir/src/timing/timing_graph_builder.cpp.o<br>[100%] Building CXX object vpr/CMakeFiles/libvpr.dir/src/util/vpr_utils.cpp.o<br>[100%] Linking CXX static library libvpr.a<br>[100%] Built target libvpr<br>[100%] Building CXX object vpr/CMakeFiles/vpr.dir/src/main.cpp.o<br>[100%] Linking CXX executable vpr<br>lto-wrapper: warning: using serial compilation of 13 LTRANS <span class="hljs-built_in">jobs</span><br>[100%] Built target vpr<br>(VPR) root@0be0dbd108b5:~/VLSI-FPGA#<br></code></pre></td></tr></table></figure><p>运行以下代码以检查VPR模块是否正确编译：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./build/vpr/vpr <span class="hljs-built_in">arch</span>/stratix10_arch.timing.xml benchmark/flattened_timer.blif<br></code></pre></td></tr></table></figure><p>观察到以下结果说明程序没有问题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">Incr Slack updates 1 <span class="hljs-keyword">in</span> 0.000465027 sec<br>Full Max Req/Worst Slack updates 1 <span class="hljs-keyword">in</span> 0.000197811 sec<br>Incr Max Req/Worst Slack updates 0 <span class="hljs-keyword">in</span> 0 sec<br>Incr Criticality updates 0 <span class="hljs-keyword">in</span> 0 sec<br>Full Criticality updates 1 <span class="hljs-keyword">in</span> 0.00104656 sec<br>Flow timing analysis took 3.20806 seconds (2.6542 STA, 0.553867 slack) (201 full updates: 26 setup, 0 hold, 175 combined).<br>VPR succeeded<br>The entire flow of VPR took 62.63 seconds (max_rss 362.6 MiB)<br>(base) root@96dd2831fa21:/vpr_master/test# <br></code></pre></td></tr></table></figure><p>同时会在当前目录下生成大约11个文件，代表当前代码应用到具体芯片上的设计结果，其中：</p><ul><li>.net文件是多种元件打包的结果，文件细节可以学习这个说明文档<a href="https://docs.verilogtorouting.org/en/latest/vpr/file_formats/#packed-netlist-format-net">VTR&#x2F;.net</a>。</li><li>.place文件则是布局结果，具体细节可以看这个文档说明<a href="https://docs.verilogtorouting.org/en/latest/vpr/file_formats/#placement-file-format-place">VTR&#x2F;.place</a>。</li><li>.route文件则是布线结果，具体细节可以看这个文档说明<a href="https://docs.verilogtorouting.org/en/latest/vpr/file_formats/#routing-file-format-route">VTR&#x2F;.route</a>。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) root@96dd2831fa21:/vpr_master/test# tree<br>.<br>|-- flattened_timer.net<br>|-- flattened_timer.net.post_routing<br>|-- flattened_timer.place<br>|-- flattened_timer.route<br>|-- packing_pin_util.rpt<br>|-- pre_pack.report_timing.setup.rpt<br>|-- report_timing.hold.rpt<br>|-- report_timing.setup.rpt<br>|-- report_unconstrained_timing.hold.rpt<br>|-- report_unconstrained_timing.setup.rpt<br>|-- vpr_stdout.log<br></code></pre></td></tr></table></figure></li></ul><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><blockquote><p>注意，整个项目源文件非常大，导致GDB加载符号表的时间很长（大约1分钟时间才能进入调试，在自己机器上可能会更久）。<br>因此一定要养成良好的编程习惯，不要写一点函数就执行整个项目的调试，利用自行编写的单元测试函数实现函数正确性的验证。</p></blockquote><h3 id="Vscode配置"><a href="#Vscode配置" class="headerlink" title="Vscode配置"></a>Vscode配置</h3><p>本教程基于vscode搭建调试环境，同学们可以自行尝试用Visual stdio或CLion等常规IDE，或者Trae这种AI高度融合的IDE。</p><blockquote><p>推荐同学们安装一个Ai加持的IDE。在VScode中，推荐安装一个marscode插件，然后按照插件教程部署写代码的Ai。<br><img src="/2024/11/12/%E5%AD%A6%E4%B9%A0-C-%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/MarsCode.png" alt="Mars Code"></p></blockquote><p>在Vscode中使用F5的Debug功能，我们需要创建两个配置文件告诉Vscode如何执行项目的Debug工作。</p><ol><li>创建一个文件夹<code>.vscode</code>和两个文件<code>launch.json</code>和<code>task.json</code>。</li><li><code>launch.json</code>填写以下内容：</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// Use IntelliSense to learn about possible attributes.</span><br>    <span class="hljs-comment">// Hover to view descriptions of existing attributes.</span><br>    <span class="hljs-comment">// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.2.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;configurations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;g++ - Build and debug active file&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cppdbg&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;request&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;launch&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;program&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;cwd&#125;/build/vpr/vpr&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;$&#123;cwd&#125;/arch/stratix10_arch.timing.xml&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;$&#123;cwd&#125;/benchmark/flattened_pulse_width_led.blif&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;-j&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;8&quot;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;stopAtEntry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;cwd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;fileDirname&#125;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;environment&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;externalConsole&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;MIMode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;gdb&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;setupCommands&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Enable pretty-printing for gdb&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;-enable-pretty-printing&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;ignoreFailures&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;preLaunchTask&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;build&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;miDebuggerPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/usr/bin/gdb&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ol start="3"><li><code>tasks.json</code>填写以下内容</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;tasks&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;label&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cmake&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;shell&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cmake&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;../&quot;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;options&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;cwd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;cwd&#125;/build&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;label&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;make&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;shell&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;make&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;-j&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;24&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;CMAKE_PARAMS=\&quot;-DVTR_IPO_BUILD=off\&quot;&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;vpr&quot;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;options&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;cwd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;cwd&#125;/build&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;dependsOn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;cmake&quot;</span><span class="hljs-punctuation">]</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;label&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;build&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;dependsOn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;cmake&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;make&quot;</span><span class="hljs-punctuation">]</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>这个时候，回到主页，在这个位置打一个断点。然后按<code>F5</code>或者点击菜单<code>Run</code>下面的<code>Starting Debugging</code>。<br><img src="/2024/11/12/%E5%AD%A6%E4%B9%A0-C-%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/debug-vpr.png" alt="alt text"><br>经过一番漫长的等待后，成功进入到熟悉的Vscode调试状态，Vscode停在了指定的位置。</p><h3 id="调试提速"><a href="#调试提速" class="headerlink" title="调试提速"></a>调试提速</h3><p>整个debug启动的过程十分漫长（作者在自己机器上启动要50s），十分浪费同学们的精力和耐心。</p><p>这主要是因为整个项目代码非常多，编译得到最后的vpr程序体积达到200MB，巨量的符号加载严重拖慢了整个gdb的调试进程。</p><blockquote><p>VTR官方文档有提到建议安装RR-debuger用于二次开发。</p></blockquote><p>⚠到这里就没有继续尝试，因为本人也一时半伙没有解决好RR-debug的安装。</p><ul><li>另一种方法是使用<code>gdb-add-index</code>来提前构造符号表。似乎没有用，加载时间还是一如既往的慢。</li></ul><h1 id="错误修复"><a href="#错误修复" class="headerlink" title="错误修复"></a>错误修复</h1><h2 id="std-range相关"><a href="#std-range相关" class="headerlink" title="std::range相关"></a><code>std::range</code>相关</h2><p>VTR的源代码使用<code>std::ranges</code>，这是<code>c++20</code>标准引入的新内容，因此至少需要保证<code>gcc&gt;=10</code>的环境。</p><p>解决方法：</p><ul><li>尝试更新系统的编译器（不推荐）。</li><li>自行编译安装gcc和g++新版本，然后更新CmakeList.txt中关于编译器设置的部分。</li><li>换系统。不管是虚拟机还是Docker，这个方案都最省事也最快。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>VTR</tag>
      
      <tag>部署安装</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[搞笑]-牛马表</title>
    <link href="/2025/04/25/%E6%90%9E%E7%AC%91-%E7%89%9B%E9%A9%AC%E8%A1%A8/"/>
    <url>/2025/04/25/%E6%90%9E%E7%AC%91-%E7%89%9B%E9%A9%AC%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="牛马表"><a href="#牛马表" class="headerlink" title="牛马表"></a>牛马表</h1><p>&emsp;&emsp;臣本社畜，躬耕于职场。苟全小命与职场，不求闻达于高管。老板不以臣驽钝，猥自枉顾，三顾臣于工位间，咨臣以工作之事，由是感激，遂许老板以驱驰。<br>&emsp;&emsp;后值项目急，受任务于压力之际。奉命于熬夜之间，尔来加班无数矣，今任务终了，成果初显，难关皆破，不负老板之所托。此后当勤勉如旧，与公司携手再创佳绩。</p><blockquote><p>真的应了那句话，研究生只有两个时刻是开心的。一个是入学的时候，另一个是毕业的时候。<br><br>写点文字发发牢骚。</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>搞笑</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[折腾]-Anything+Ollama部署自己的大模型</title>
    <link href="/2025/01/09/%E6%8A%98%E8%85%BE-Anything-Ollama%E9%83%A8%E7%BD%B2%E8%87%AA%E5%B7%B1%E7%9A%84%E5%A4%A7%E6%A8%A1%E5%9E%8B/"/>
    <url>/2025/01/09/%E6%8A%98%E8%85%BE-Anything-Ollama%E9%83%A8%E7%BD%B2%E8%87%AA%E5%B7%B1%E7%9A%84%E5%A4%A7%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<p>本文记录在本地利用Ollama后端和AnythingLLM前端，部署自己私有化大模型的过程，方便日后查找。<br>采用docker镜像安装的形式，方便管理和版本更新。</p><h1 id="一、前期准备"><a href="#一、前期准备" class="headerlink" title="一、前期准备"></a>一、前期准备</h1><blockquote><p>确保主机上安装有docker，且能正常访问docker hub官网（或者自行更改镜像源使用国内镜像站）。<br><a href="https://github.com/brittlewis12/autogguf">Autogguf</a>是写文档时使用的safetensor转gguf工具。工具有可能长久没有更新，不保证在工具之后的大模型可以被工具正确转换。</p></blockquote><p>从docker hub处获得<code>ollama</code>和<code>anythingllm</code>的最新版本镜像。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull ollama/ollama:latest<br>docker pull minplexlabs/anythingllm:latest<br></code></pre></td></tr></table></figure><p>有些时候，主机是<del>实验室服务器</del>不太可能能直连外网，需要用自己的机器先下载好相关的镜像再上传。这里记录docker导出和导入镜像的两种方式。</p><h2 id="1、镜像迁移"><a href="#1、镜像迁移" class="headerlink" title="1、镜像迁移"></a>1、镜像迁移</h2><p>docker有两组指令用于容器与镜像的迁移工作，其中<code>export</code>和<code>import</code>用于容器的导出与加载，<code>save</code>和<code>load</code>用于镜像的导出与价值，<strong>注意不要混用两组指令</strong>。<br>这里我们只是用自己的机器下载了镜像，没有对原始镜像做修改，因此使用<code>save</code>和<code>load</code>命令组。下面的<code>[image ID]</code>自行修改为实际ID，<code>[XXX]</code>修改为任意名字均可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker save [image ID] -o [XXX].tar<br>或者<br>docker save [image ID] &gt; [XXX].tar<br></code></pre></td></tr></table></figure><p>利用各种工具上传到服务器上后，利用<code>load</code>指令加载镜像。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker load -i [XXX].tar<br>或者<br>docker load &lt; [XXX].tar<br></code></pre></td></tr></table></figure><blockquote><p>注意，load的镜像是没有对应的tag和repository名，需要手动重新指定。导入镜像时最好同时指定镜像名字，将来便于进行镜像的管理。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker tag [image ID] ollama/ollama:latest<br></code></pre></td></tr></table></figure><h1 id="二、启动镜像"><a href="#二、启动镜像" class="headerlink" title="二、启动镜像"></a>二、启动镜像</h1><p>anythingllm启动镜像，注意对于<code>STORAGE_LOCATION</code>变量的赋值，将来的聊天记录以及设置等等配置文件均会存放在宿主机的这个目录下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">export STORAGE_LOCATION=$HOME/anythingllm<br>mkdir -p $STORAGE_LOCATION<br>touch &quot;$STORAGE_LOCATION/.env&quot;<br>docker run -d -p 3001:3001 --cap-add SYS_ADMIN -v $&#123;STORAGE_LOCATION&#125;:/app/server/storage -v $&#123;STORAGE_LOCATION&#125;/.env:app/server/.env -e STORAGE_DIR=&quot;/app/server/storage&quot; mintplexlabs/anything<br></code></pre></td></tr></table></figure><p>ollama启动镜像，注意<code>-v</code>参数后面的<code>$HOME/ollama</code>指定宿主机模型文件存放位置，<code>/root/ollama</code>是映射到容器内部的位置，稍后在这个目录下找到宿主机存放的模型文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d -v $HOME/ollama:/root/ollama -p 11434:11434 --name ollama ollama/ollama:latest<br></code></pre></td></tr></table></figure><h1 id="三、转化模型"><a href="#三、转化模型" class="headerlink" title="三、转化模型"></a>三、转化模型</h1><blockquote><p>Ollama使用onnx作为大模型推理后端，使用的模型文件格式为onnx定义的<code>gguf</code>格式。一般从HuggingFace或者其他地方下载的是<code>safetensor</code>或者<code>pt</code>的pytorch保存格式。需要经过转化后才能正常使用。</p><ul><li>选择已经量化好的模型下载也是一种途径。</li><li>其中使用ollama提供的指令来部署模型也是一种方案。优点是不需要自己去折腾模型格式转化的问题；缺点是个性化程度低。</li></ul></blockquote><p>这里选择<code>Qwen2.5</code>作为示例，主要是因为Qwen在阿里自家的<a href="https://www.modelscope.cn/">modelscope（魔搭）</a>社区上有全套，且服务器在国内，容易下载。<br><del>本文找到魔搭一个用户，他制作一系列Qwen2.5的GGUF优化模型。并从中选择7B-GGUF-V3-LOT格式。</del>文章很早开始写，但是写到一半发现新发布的deepseek火遍全球，这里火速改成<a href="https://www.modelscope.cn/models/unsloth/DeepSeek-R1-Distill-Qwen-7B-GGUF">deepseek蒸馏的Qwen</a>作为教程。<br>打开链接会发现里面包含多个模型，这里简单介绍一下各个后缀的量化含义。首先模型的名字<code>DeepSeek-R1-Distill-Qwen-7B</code>，然后是字母数字和下划线构成的后缀。<br>后缀遵循特定的命名约定：“Q”+权重的精度（bit位数）+特定量化变体。以下举例各种后缀代表的含义。来源<a href="https://github.com/ggerganov/ggml/blob/master/docs/gguf.md">llama.cpp</a>。</p><ul><li>定义基础量化后缀<ul><li>F32：权重为32位浮点数</li><li>F16：权重为16位浮点数</li><li>Q4_0：代表第0种类型的4位量化，$w&#x3D;d*q$，其中$d$是缩放因子。</li><li>Q4_1：代表第1种类型的4位量化，$w&#x3D;d*q+m$，其中$d$是缩放因子，$m$是一个量化块中最小的数字。</li></ul></li><li>基于以上基础后缀组合<ul><li>K系列后缀<ul><li>二重量化基础说明<ul><li>Q2_K：（1类型）对包含16个量化块的超级块进行2bit量化，每个量化块包含16个权重，块的$q$和$m$则是4bit。平均<code>2.5625</code>bit每个权重参数。</li><li>Q3_K：（0类型）对包含16个量化块的超级块进行3bit量化，每个量化块包含16个权重，块的$q$则是6bit。平均<code>3.4375</code>bit每个权重参数。</li><li>Q4_K：（1类型）对包含8个量化块的超级块进行4bit量化，每个量化块包含32个权重，块的$q$和$m$则是6bit。平均<code>4.5</code>bit每个权重参数。</li><li>Q5_K：（1类型）类似<code>Q4_K</code>，平均<code>5.5</code>bit每个权重参数。</li><li>Q6_K：（0类型）对包含16个量化块的超级块进行6bit量化，每个量化块包含16个权重，块的$q$则是8bit。平均<code>6.5625</code>bit每个权重参数。</li><li>Q8_K：（0类型）相比<code>Q8_0</code>量化，块大小变成256，且所有的点积结果都被量化到2-6bit。</li></ul></li><li>基于K系列后缀的混合量化说明<a href="https://github.com/ggerganov/llama.cpp/pull/1684">issue1684</a><ul><li>LLM-Q2_K：用<code>Q4_K</code>量化<code>attention.wv</code>和<code>feed_forward.w2</code>，其余部分用<code>Q2_K</code>进行量化。</li><li>LLM-Q3_K_S：使用<code>Q3_K</code>量化所有张量。</li><li>LLM-Q3_K_M：用<code>Q4_K</code>量化<code>attention.wv</code>，<code>attention.wo</code>和<code>feed_forward.w2</code>，其余部分用<code>Q3_K</code>量化。</li><li>LLM-Q3_K_L：用<code>Q5_K</code>量化<code>attention.wv</code>，<code>attention.wo</code>和<code>feed_forward.w2</code>，其余部分用<code>Q3_K</code>。</li><li>LLM-Q4_K_S：使用<code>Q4_K</code>量化所有张量。</li><li>LLM-Q4_K_M：使用<code>Q6_K</code>量化<code>attention.wv</code>和<code>feed_forward.w2</code>一半的张量，其余部分用<code>Q4_K</code>。</li><li>LLM-Q5_K_S：用<code>Q5_K</code>量化所有张量。</li><li>LLM-Q5_K_M：使用<code>Q6_K</code>量化<code>attention.wv</code>和<code>feed_forward.w2</code>一半的张量，其余部分用<code>Q5_K</code>。</li><li>LLM-Q6_K：使用6bit的<code>Q8_K</code>量化所有权重。</li></ul></li></ul></li><li>IQ系列，带重要性矩阵的量化<a href="https://github.com/ggerganov/llama.cpp/pull/4773">SOTA 2-bit quants by ikawrakow · Pull Request #4773 · ggerganov&#x2F;llama.cpp · GitHub</a></li></ul></li><li></li></ul><h1 id="四、配置调试"><a href="#四、配置调试" class="headerlink" title="四、配置调试"></a>四、配置调试</h1><p>配置期间可能需要启动多个终端以同时开展多个工作，这里记录下如何在一个容器内启动多个终端的方法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> docker <span class="hljs-built_in">exec</span> -it [CONTAINER] bash<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>折腾</tag>
      
      <tag>LLM</tag>
      
      <tag>部署应用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[折腾]CUDA11.7也要玩LLM</title>
    <link href="/2024/11/19/%E6%8A%98%E8%85%BE-CUDA11-7%E4%B9%9F%E8%A6%81%E7%8E%A9LLM/"/>
    <url>/2024/11/19/%E6%8A%98%E8%85%BE-CUDA11-7%E4%B9%9F%E8%A6%81%E7%8E%A9LLM/</url>
    
    <content type="html"><![CDATA[<h1 id="零、起因"><a href="#零、起因" class="headerlink" title="零、起因"></a>零、起因</h1><p>在超算中心的计算节点上研究LLM推理与训练，并测试一些模型。然而超算中心计算节点那是“相当先进”，无论3090-24GB还是A10-24GB都是 CUDA 11.7 版本，唯一较好的 CUDA 11.8 的 A100-40GB 计算节点一直无法使用。</p><blockquote><p><font color="#ff0000">CUDA 11.7</font> 和 <font color="#ff0000">CUDA 11.8</font> 是 pytorch 的一个分水岭，从 <code>torch 2.1.0</code> 开始不支持 CUDA11.7 ，然而很多LLM的新技术在 <code>torch 2.1.0</code> 以后开始被引入，例如 <code>sparce attention</code> <code>flash attention</code> 等等加速大模型推理的技术。</p></blockquote><p>因为没有合适的 torch 版本，因此决定自己动手编一个 <code>CUDA 11.7</code> 版本的 <code>torch 2.3.0</code> （理论上可行）踩坑记录如下：<a href="https://peach-water.github.io/2024/09/18/%E6%8A%98%E8%85%BE-%E7%BC%96%E8%AF%91pytorch/">折腾-编译pytorch</a> 。</p><h1 id="一、环境安装"><a href="#一、环境安装" class="headerlink" title="一、环境安装"></a>一、环境安装</h1><h2 id="1、Vllm-推理引擎"><a href="#1、Vllm-推理引擎" class="headerlink" title="1、Vllm 推理引擎"></a>1、Vllm 推理引擎</h2><p>使用 <a href="https://github.com/hiyouga/LLaMA-Factory">llamafactory</a> 支持 <code>transformers</code> 和 <code>vllm</code> 这两个推理引擎，不过比较可惜，<code>vllm</code> 官方仅支持 CUDA 11.8，因此这个推理引擎应该是用不了了，如果不用 CUDA 那么使用这个引擎没有意义。</p><h1 id="二、错误修复"><a href="#二、错误修复" class="headerlink" title="二、错误修复"></a>二、错误修复</h1><h2 id="1、RuntimeError-“triu-tril-cuda-template”-not-implemented-for-‘BFloat16’"><a href="#1、RuntimeError-“triu-tril-cuda-template”-not-implemented-for-‘BFloat16’" class="headerlink" title="1、RuntimeError: “triu_tril_cuda_template” not implemented for ‘BFloat16’"></a>1、RuntimeError: “triu_tril_cuda_template” not implemented for ‘BFloat16’</h2><p>错误分析：这是 <code>torch 2.1.0</code> 以前对 <code>triu</code> 和 <code>tril</code> 这两个的 CUDA 算子缺少实现导致的错误。<br>解决方案：<font color="ffff00">①</font>最优的当然就是直接安装最新版 torch 。然而正如前面提到的，<code>torch 2.1.0</code> 官方不支持 CUDA 11.7 。</p><p><font color="ffff00">②</font>次优的解决方案，运行如下指令，可以安装一个 pytorch 的 2.1.0 预览版，解决上述问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip3 install numpy --pre torch --force-reinstall --index-url https://download.pytorch.org/whl/nightly/cu117<br></code></pre></td></tr></table></figure><p>当然这会导致 torchvision 和 torchaudio 这两个库的不匹配，不过反正用不上也就无所谓了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>折腾</tag>
      
      <tag>LLM</tag>
      
      <tag>CUDA</tag>
      
      <tag>Pytorch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[折腾]编译 merlin compiler</title>
    <link href="/2024/11/15/%E6%8A%98%E8%85%BE-%E7%BC%96%E8%AF%91-merlin-compiler/"/>
    <url>/2024/11/15/%E6%8A%98%E8%85%BE-%E7%BC%96%E8%AF%91-merlin-compiler/</url>
    
    <content type="html"><![CDATA[<p>背景：为了测试 HLS ，需要 merlin compiler 这个 VLS 编译器。这个库需要 <code>gcc 4.9.4</code> <code>llvm6</code> 以及</p><h1 id="零、阅读须知"><a href="#零、阅读须知" class="headerlink" title="零、阅读须知"></a>零、阅读须知</h1><p>⚠先弄好好gcc4.9.4然后开始后面<code>llvm</code>、<code>boost</code>、<code>clang</code>库的处理。<br>这是一个老项目了，不确定使用最新的库文件是否正常编译。且本教程最后只能编译得到编译器本身，附带的一些功能仍然编译失败。</p><h1 id="一、gcc4-9-4"><a href="#一、gcc4-9-4" class="headerlink" title="一、gcc4.9.4"></a>一、gcc4.9.4</h1><h2 id="1、准备工作"><a href="#1、准备工作" class="headerlink" title="1、准备工作"></a>1、准备工作</h2><p>从以下<a href="https://github.com/gcc-mirror/gcc/tree/releases/gcc-4.9.4">位置</a>下带源代码。<br>一并下载编译<code>gcc</code>所需的依赖库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget ftp://ftp.gnu.org/gnu/gmp/gmp-4.3.2.tar.bz2 -o gmp.tar.bz2<br>wget https://www.mpfr.org/mpfr-3.1.0/mpfr-3.1.0.tar.bz2 -o mpfr.tar.bz2<br>wget https://ftp.gnu.org/gnu/mpc/mpc-1.0.1.tar.gz -o mpc.tar.gz<br></code></pre></td></tr></table></figure><h2 id="2、开始编译"><a href="#2、开始编译" class="headerlink" title="2、开始编译"></a>2、开始编译</h2><p>进入gcc文件目录<code>cd ./gcc.4.9.4</code>，然后设定编译参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./configure --prefix=[使用本地目录即可]/gcc4  --enable-bootstrap  --enable-checking=release --enable-languages=c,c++<br></code></pre></td></tr></table></figure><p>直接开始编译，建议开单线程，因为编译会出非常多的错误，单线程方便定位错误。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make -j 1<br></code></pre></td></tr></table></figure><h2 id="3、错误修复"><a href="#3、错误修复" class="headerlink" title="3、错误修复"></a>3、错误修复</h2><p><del>这编译多是一件美事啊，编，TNND，为什么不编</del><br>因为现在系统环境上默认的 <code>gcc 11.3</code> 及其之后的版本默认带 <code>c++17</code> 标准，所以编译路上会有很多错误。</p><blockquote><p>⚠注意以下解决方案中的 cd 路径需要根据实际情况自行修改，不可照抄</p></blockquote><h3 id="a、type-bool-in-operator-is-forbidden-in-c-1789"><a href="#a、type-bool-in-operator-is-forbidden-in-c-1789" class="headerlink" title="a、type bool in operator++ is forbidden in c++1789"></a>a、type bool in operator++ is forbidden in c++1789</h3><p>原因：因为 C++17 标准不允许 bool 变量使用 ++ 操作符。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">../.././gcc/reload1.c: In <span class="hljs-keyword">function</span> ‘void init_reload()’:../.././gcc/reload1.c:89:24: error: use of an operand of <span class="hljs-built_in">type</span> ‘bool’ <span class="hljs-keyword">in</span> ‘operator++’ is forbidden <span class="hljs-keyword">in</span> C++1789 |   (this_target_reload-&gt;x_spill_indirect_levels)|   ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~<br></code></pre></td></tr></table></figure><p>解决方案：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ./host-x86_64-unknown-linux-gnu/gcc<br></code></pre></td></tr></table></figure><p>从编译日志找到错误的编译命令加上 <code>-std=c++11</code> 重新执行，然后回到上层目录重新 <code>make -j 1</code> 即可。</p><h3 id="b、dereferencing-pointer-to-incomplete-type"><a href="#b、dereferencing-pointer-to-incomplete-type" class="headerlink" title="b、dereferencing pointer to incomplete type"></a>b、dereferencing pointer to incomplete type</h3><p>原因：数据类型不匹配。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">./md-unwind-support.h: 在函数<span class="hljs-string">&#x27;x86_64_fallback_frame_state&#x27;</span>中:<br>./md-unwind-support.h:65:47: 错误: dereferencing pointer to incomplete <span class="hljs-built_in">type</span><br>    sc = (struct sigcontext *) (void *) &amp;uc_-&gt;uc_context;<br>make[3]: *** [../.././libgcc/shared-object.mk:14: unwind-dw2.o] 错误 1<br></code></pre></td></tr></table></figure><p>类似的错误还有</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">./md-unwind-support.h: 在函数‘x86_fallback_frame_state’中:<br>./md-unwind-support.h:141:18: 错误： 字段‘uc’的类型不完全<br>  struct ucontext uc;<br></code></pre></td></tr></table></figure><p>解决方案</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> [path to gcc]/gcc4.9.4/x86_64-unknown-linux-gnu/libgcc<br></code></pre></td></tr></table></figure><p>虽然报错是在第 65 行，但是我们需要修改第 61 行。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ucontext</span> *<span class="hljs-title">uc_</span> =</span> context-&gt;cfa<br><span class="hljs-comment">// 改成</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ucontext_t</span> *<span class="hljs-title">uc_</span> =</span> context-&gt;cfa<br></code></pre></td></tr></table></figure><p>对于第141行的错误则如下修改。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ucontext</span> <span class="hljs-title">uc</span>;</span><br><span class="hljs-comment">// 改成</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ucontext_t</span> <span class="hljs-title">uc</span>;</span><br></code></pre></td></tr></table></figure><h3 id="c、Handler-stack未定义"><a href="#c、Handler-stack未定义" class="headerlink" title="c、Handler_stack未定义"></a>c、Handler_stack未定义</h3><p>原因不知道。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">../../.././libsanitizer/sanitizer_common/sanitizer_stoptheworld_linux_libcdep.cc: 在函数‘int __sanitizer::TracerThread(void*)’中:<br>../../.././libsanitizer/sanitizer_common/sanitizer_stoptheworld_linux_libcdep.cc:241:22: 错误： 聚合‘sigaltstack handler_stack’类型不完全，无法被定义<br>   struct sigaltstack handler_stack;<br></code></pre></td></tr></table></figure><p>解决方案（参考<a href="https://reviews.llvm.org/D35246">llvm</a>）</p><ul><li>打开 <code>sanitizer_common/sanitizer_linux.h</code> 去掉其中的 <code>struct sigaltstack;</code> 并把之后出现的两处 <code>struct sigaltstack</code> 换成 <code>void</code> 。</li><li>打开 <code>sanitizer_common/sanitizer_linux.cc</code> 文件出现的两处 <code>struct sigaltstack</code> 换成 <code>void</code> 。</li><li>打开 <code>sanitizer_common/sanitizer_stoptheworld_linux_libcedep.cc</code> 把 <code>struct sigaltstack handler_stack;</code> 换成 <code>stack_t handler_stack</code> 。</li><li>打开 <code>tsan/rtl/tsan_platform_linux.cc</code> 文件把 <code>__res_state *statp = (__res_state*)state;</code> 换成 <code>struct __res_state *statp = (struct __res_state*) state;</code> 。</li></ul><h3 id="d、SIGSEGV-undefined"><a href="#d、SIGSEGV-undefined" class="headerlink" title="d、SIGSEGV undefined"></a>d、SIGSEGV undefined</h3><p>错误原因不知道。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">../../.././libsanitizer/asan/asan_linux.cc: 在函数‘bool __asan::AsanInterceptsSignal(int)’中:<br>../../.././libsanitizer/asan/asan_linux.cc:107:20: 错误： ‘SIGSEGV’在此作用域中尚未声明<br>   <span class="hljs-built_in">return</span> signum == SIGSEGV &amp;&amp; flags()-&gt;handle_segv;<br></code></pre></td></tr></table></figure><p>解决方案</p><ul><li>打开 <code>libsanitizer/asan/asan_linux.cc</code> 中添加头文件 <code>#include &lt;signal.h&gt;</code> 即可。</li></ul><h1 id="二、LLVM6-0-0"><a href="#二、LLVM6-0-0" class="headerlink" title="二、LLVM6.0.0"></a>二、LLVM6.0.0</h1><h2 id="1、准备工作-1"><a href="#1、准备工作-1" class="headerlink" title="1、准备工作"></a>1、准备工作</h2><p>从这个<a href="https://github.com/llvm/llvm-project/tree/llvmorg-6.0.0">链接</a>下载 llvm6 的源码。</p><h2 id="2、开始编译-1"><a href="#2、开始编译-1" class="headerlink" title="2、开始编译"></a><del>2、开始编译</del></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">mkdir llvm-project-llvmorg<span class="hljs-number">-6.0</span><span class="hljs-number">.0</span>/llvm/build<br>cd llvm-project-llvmorg<span class="hljs-number">-6.0</span><span class="hljs-number">.0</span>/llvm/build<br>cmake -G <span class="hljs-string">&quot;Unix Makefiles&quot;</span> -DLLVM_ENABLE_PROJECTS=<span class="hljs-string">&quot;clang&quot;</span> -DCMAKE_BUILD_TYPE=Release ../<br>make -j <span class="hljs-number">1</span>~~<br></code></pre></td></tr></table></figure><p><del>然后不需要执行make install在build文件夹下会存在编译好的结果，把build文件夹放到merlin compiler&#x2F;trunk&#x2F;lib下即可。同时改名与merlin_setting.sh中的LLVM_ROOT_DIR变量一致。</del><br><del>这里就改名为 llvm6.0.0 。</del></p><h1 id="三、Clang6-0-0"><a href="#三、Clang6-0-0" class="headerlink" title="三、Clang6.0.0"></a>三、Clang6.0.0</h1><p>参考LLVM6那一节，已经下载好源代码了。llvm这个项目的特点是，所有的库都需要<code>llvm-project-llvmorg-6.0.0/llvm</code>为编译的起始点，通过设置不同的<code>DLLVM_ENABLE_PROJECTS</code>变量改变编译的对象，可选的对象是底下每一个文件夹。</p><h2 id="1、开始编译"><a href="#1、开始编译" class="headerlink" title="1、开始编译"></a>1、开始编译</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> llvm-project-llvmorg-6.0.0/build<br><span class="hljs-built_in">cd</span> llvm-project-llvmorg-6.0.0/build<br>cmake -G Ninja ../llvm -DLLVM_ENABLE_PROJECTS=clang -DLLVM_BUILD_TESTS=OFF -DLLVM_TARGETS_TO_BUILD=<span class="hljs-string">&quot;X86&quot;</span> -DBUILD_SHARED_LIBS=OFF<br>ninja<br><span class="hljs-comment"># clang 不明白为什么直接make找不到，得运行ninja指令</span><br></code></pre></td></tr></table></figure><p>可以运行以下指令进行<code>llvm</code>编译结果测试，当然前面的<code>-DLLVM_BUILD_TESTS=ON</code>才行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ninja check <span class="hljs-comment"># Test LLVM Only</span><br>ninja clang-test <span class="hljs-comment"># Test Clang Only</span><br></code></pre></td></tr></table></figure><p>❌不需要执行<code>make install</code>，把<code>build</code>文件夹放到<code>merlin compiler/trunk/lib</code>下即可。同时改名与<code>merlin_setting.sh</code>中的<code>LLVM_ROOT_DIR</code>变量一致。<br>这里就改名为 <code>llvm6.0.0</code> 。</p><h1 id="四、boost1-67-0"><a href="#四、boost1-67-0" class="headerlink" title="四、boost1.67.0"></a>四、boost1.67.0</h1><p>从<a href="https://www.boost.org/users/history/version_1_67_0.html">链接</a>获得源码（记得解压），存放到<code>merlin_compiler/trunk/source-opt/lib</code>目录下，并修改<code>bootstrap.sh</code>的<code>PREFIX</code>变量如下（⚠要和<code>merlin_setting.sh</code>的设置一致）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">PREFIX=[path to merlin]/merlin_compiler/trunk/source-opt/lib/boost<br><span class="hljs-comment"># 要和下面的设置一致，这项设置来自于merlin_compiler的merlin_setting.sh</span><br><span class="hljs-comment"># export boost_path=$MERLIN_PATH/boost</span><br></code></pre></td></tr></table></figure><p>然后，会自动在目录下生成<code>b2</code>和<code>bjam</code>两个指令脚本，确保安装gcc和g++，一般不会有bug。</p><h1 id="五、编译merlin-compiler主体"><a href="#五、编译merlin-compiler主体" class="headerlink" title="五、编译merlin_compiler主体"></a>五、编译merlin_compiler主体</h1><h2 id="1、准备工作-2"><a href="#1、准备工作-2" class="headerlink" title="1、准备工作"></a>1、准备工作</h2><p>在上面编译过程中多次修改 <code>merlin_setting.sh</code> 文件，这里干脆放出最终修改版本（TODO）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#######################################</span><br><span class="hljs-comment"># Merlin </span><br><span class="hljs-comment">#######################################</span><br><span class="hljs-built_in">export</span> MERLIN_COMPILER_HOME=/home/w/DSE/merlin-compiler/trunk<br><br><span class="hljs-built_in">export</span> MERLIN_PATH=<span class="hljs-variable">$MERLIN_COMPILER_HOME</span>/source-opt/lib<br><span class="hljs-built_in">export</span> llvm_path=<span class="hljs-variable">$MERLIN_PATH</span>/llvm6.0.0<br><span class="hljs-built_in">export</span> deps_path=<span class="hljs-variable">$MERLIN_PATH</span>/<br><span class="hljs-built_in">export</span> clang_path=<span class="hljs-variable">$MERLIN_PATH</span>/llvm6.0.0/bin<br><span class="hljs-built_in">export</span> rose_path=<span class="hljs-variable">$MERLIN_PATH</span>/rose<br><span class="hljs-built_in">export</span> rjson_path=<span class="hljs-variable">$MERLIN_PATH</span>/rapidjson<br><span class="hljs-built_in">export</span> gcc_path=<span class="hljs-variable">$MERLIN_PATH</span>/gcc4<br><span class="hljs-built_in">export</span> boost_path=<span class="hljs-variable">$MERLIN_PATH</span>/boost<br><br><span class="hljs-built_in">export</span> MERLIN_DEPS=<span class="hljs-variable">$deps_path</span><br><span class="hljs-built_in">export</span> LLVM_ROOT_DIR=<span class="hljs-variable">$llvm_path</span><br><span class="hljs-built_in">export</span> CLANG_ROOT_DIR=<span class="hljs-variable">$llvm_path</span><br><span class="hljs-built_in">export</span> ROSE_ROOT_DIR=<span class="hljs-variable">$rose_path</span><br><span class="hljs-built_in">export</span> RAPIDJSON_ROOT_DIR=<span class="hljs-variable">$rjson_path</span><br><span class="hljs-built_in">export</span> GCC_ROOT_DIR=<span class="hljs-variable">$gcc_path</span><br><span class="hljs-built_in">export</span> BOOST_ROOT=<span class="hljs-variable">$boost_path</span><br><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$gcc_path</span>/bin/:<span class="hljs-variable">$PATH</span><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$llvm_path</span>/bin/:<span class="hljs-variable">$PATH</span><br><br><span class="hljs-comment">#lib32 if lib64 is not available</span><br><span class="hljs-built_in">export</span> LD_LIBRARY_PATH=<span class="hljs-variable">$gcc_path</span>/lib64:<span class="hljs-variable">$llvm_path</span>/lib:<span class="hljs-variable">$LD_LIBRARY_PATH</span><br><span class="hljs-built_in">export</span> LIBRARY_PATH=<span class="hljs-variable">$llvm_path</span>/lib<br><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$MERLIN_COMPILER_HOME</span>/build/bin:<span class="hljs-variable">$PATH</span><br></code></pre></td></tr></table></figure><p>在上面的所有准备工作都好了以后，回到<code>merlin_compiler</code>主文件夹下，执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ./merlin_setting.sh<br><span class="hljs-built_in">mkdir</span> trunk/build<br><span class="hljs-built_in">cd</span> trunk/build<br><span class="hljs-comment"># 我也是绷不住了，默认 python3 执行会报错，只好指定 python2</span><br>cmake -DCMAKE_BUILD_TYPE=Release -DPYTHON_EXECUTABLE=/usr/bin/python2 ..<br>make -j 1<br></code></pre></td></tr></table></figure><h2 id="2、错误修复"><a href="#2、错误修复" class="headerlink" title="2、错误修复"></a>2、错误修复</h2><h3 id="a、GLIBCXX-3-4-22-not-found"><a href="#a、GLIBCXX-3-4-22-not-found" class="headerlink" title="a、GLIBCXX_3.4.22 not found"></a>a、GLIBCXX_3.4.22 not found</h3><p>问题原因：gcc4.9.4自带的libstdc++版本太老（我是真不明白，为什么merlin指定编译环境4.9.4，又出现libstdc++版本不够的问题，只能认为写merlin时的服务器很老很老）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ make -j 1<br>/usr/bin/cmake: /home/w/DSE/merlin-compiler/trunk/source-opt/lib/gcc4/lib64/libstdc++.so.6: version `GLIBCXX_3.4.22<span class="hljs-string">&#x27; not found (required by /usr/bin/cmake)</span><br><span class="hljs-string">/usr/bin/cmake: /home/w/DSE/merlin-compiler/trunk/source-opt/lib/gcc4/lib64/libstdc++.so.6: version `CXXABI_1.3.9&#x27;</span> not found (required by /usr/bin/cmake)<br>/usr/bin/cmake: /home/w/DSE/merlin-compiler/trunk/source-opt/lib/gcc4/lib64/libstdc++.so.6: version `GLIBCXX_3.4.21<span class="hljs-string">&#x27; not found (required by /usr/bin/cmake)</span><br><span class="hljs-string">Makefile:1783: recipe for target &#x27;</span>cmake_check_build_system<span class="hljs-string">&#x27; failed</span><br><span class="hljs-string">make: *** [cmake_check_build_system] Error 1</span><br></code></pre></td></tr></table></figure><p>解决方案：<br>从其他地方借一个<code>libstdc++</code>就好，比如我从<code>/usr/lib/gcc</code>环境（即服务器上的高版本gcc）中借一个。在借之前先保存原版，然后搜索本地的高版本gcc中的<code>libstdc++</code>的文件位置替换<code>gcc4.9.4</code>的<code>libstdc++</code>文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> libstdc++.so.6.0.20 libstdc++.so.6.0.20.old<br><span class="hljs-built_in">mv</span> libstdc++.so.6 libstdc++.so.6.old<br><span class="hljs-built_in">mv</span> libstdc++.so libstdc++.so.old<br><span class="hljs-comment"># 这里就偷懒搜一个，一般在 /usr/lib/x86_64-linux-gnu 目录下会有</span><br><span class="hljs-built_in">sudo</span> find /usr/lib -name libstdc++*<br><span class="hljs-built_in">cp</span> /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29 [path to merlin]/merlin_compiler/trunk/source-opt/gcc4/lib64<br></code></pre></td></tr></table></figure><p>最后重新建立软连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ln</span> -s libstdc++.so.6.0.29 libstdc++.so<br><span class="hljs-built_in">ln</span> -s libstdc++.so.6.0.29 libstdc++.so.6<br></code></pre></td></tr></table></figure><h3 id="b、MDiag-emitDiagnosticLoc-marked-override-but-does-not-override"><a href="#b、MDiag-emitDiagnosticLoc-marked-override-but-does-not-override" class="headerlink" title="b、MDiag::emitDiagnosticLoc() marked override, but does not override"></a>b、MDiag::emitDiagnosticLoc() marked override, but does not override</h3><p>问题原因：子类标记为override，但是父类没有标记为override。不过实际检查报错的位置发现clang对应位置是有override标记的，推测编译merlin时指定的clang位置有错误。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">/home/w/DSE/merlin-compiler/trunk/mars-gen/tools/mcheck/mdiag.h:60:8: 错误： ‘void MDiag::emitDiagnosticLoc(clang::FullSourceLoc, clang::PresumedLoc, clang::DiagnosticsEngine::Level, llvm::ArrayRef&lt;clang::CharSourceRange&gt;)’ marked override, but does not override<br>   void emitDiagnosticLoc(clang::FullSourceLoc, clang::PresumedLoc,<br></code></pre></td></tr></table></figure><p>解决方案：打开<code>merlin_compiler/trunk/mars-gen/tools/mcheck/mdiag.h</code>去掉其中 62、63 行的 <code>override</code> 。</p><h3 id="c、mcheck-mrefactor-undfeind"><a href="#c、mcheck-mrefactor-undfeind" class="headerlink" title="c、mcheck mrefactor undfeind"></a>c、mcheck mrefactor undfeind</h3><p>问题原因：clang库中确实没有这些定义，不知道是版本问题还是代码bug。错误类似下面这种：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">using clang::ast_matchers::cxxNewExpr; Undefined<br>using clang::ast_matchers::cxxOperatorCallExpr; Undefined<br></code></pre></td></tr></table></figure><p>⚠比较取巧的解决方案是打开<code>merlin-compiler/trunk/mars-gen/tools/mcheck/CMakeLists.txt</code>文件去掉以下两行（为什么取巧呢，这是因为这两个模块是工具，不确定这样编译出的merlincc是否正常工作，寄希望于这两个工具不影响正常编译不大）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">add_subdirectory(<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/mcheck&quot;</span>)<br>add_subdirectory(<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/mrefactor&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="d、-usr-bin-ld-lrose"><a href="#d、-usr-bin-ld-lrose" class="headerlink" title="d、&#x2F;usr&#x2F;bin&#x2F;ld -lrose"></a>d、&#x2F;usr&#x2F;bin&#x2F;ld -lrose</h3><p>问题原因：找不到库文件位置（经典错误了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/usr/bin/ld:/home/w/DSE/merlin-compiler/trunk/source-opt/lib/rose/lib/librose.so: file format not recognized; treating as linker script<br></code></pre></td></tr></table></figure><p>从git上下载的文件因为丢失链接位置信息，而自己编译的<code>librose.so</code>没有链接指向它。这里删除然后重新建立软链接即可。随即又冒出另一个问题（不是哥们，那之前找到的librose.so算什么？）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">/usr/bin/ld: 找不到 -lrose<br>clang: error: linker <span class="hljs-built_in">command</span> failed with <span class="hljs-built_in">exit</span> code 1 (use -v to see invocation)<br></code></pre></td></tr></table></figure><p>解决方法：重新创建一个指向<code>librose.so</code>的软连接。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> merlin-compiler/trunk/source-opt/lib/rose/lib<br><span class="hljs-built_in">rm</span> librose.so<br><span class="hljs-built_in">ln</span> -s librose.so.0.0.0 librose.so<br><span class="hljs-comment"># 然后拷贝到 /usr/bin 目录下新建一个软连接，这一步需要 sudo 权限</span><br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">cp</span> librose.so.0.0.0 /usr/lib<br><span class="hljs-built_in">cd</span> /usr/lib<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">ln</span> -s librose.so.0.0.0 librose.so<br></code></pre></td></tr></table></figure><p>这里也见到另一种解决方案，就是通过apt命令安装这个库。不过没有尝试。</p><h1 id="六、见证曙光"><a href="#六、见证曙光" class="headerlink" title="六、见证曙光"></a>六、见证曙光</h1><p>经过三天鏖战，走了一堆弯路之后，终于见到如下的输出。（应该是好了吧</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">[ 92%] Built target DsBitwidthOpt<br>[ 92%] Built target set_cfg<br>[ 93%] Built target DsTiling<br>[ 94%] Built target DsScope<br>[ 95%] Built target DsLoopParallel<br>[ 96%] Built target DsSkeletonExtract<br>[ 97%] Built target DsResourceEval<br>[ 98%] Built target DsPipeline<br>[ 99%] Built target LoopParallel<br>[100%] Linking CXX executable ../../../bin/mars_opt_org<br>[100%] Built target mars_opt_org<br>(base) w@HAS-T640:~/DSE/merlin-compiler/trunk/build$ <br></code></pre></td></tr></table></figure><p>怀着激动的小手~</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) w@HAS-T640:~/DSE/merlin-compiler/trunk/build$ merlincc -h<br>Smartmatch is experimental at /home/w/DSE/merlin-compiler/trunk//mars-gen/scripts/lib/message.pm line 392.<br><br><br>Usage: merlincc &lt;options&gt; &lt;filename&gt;.&lt; c|cpp|mco &gt;<br><br>Options:<br>-v, --version<br>    Display compiler version<br><br>--list-platform<br>    Display supported platforms<br>...<br></code></pre></td></tr></table></figure><p>终于，c++的高层次综合功能是能用了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>分享</tag>
      
      <tag>折腾</tag>
      
      <tag>DSE</tag>
      
      <tag>编译</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[学习]C++性能分析实战</title>
    <link href="/2024/11/12/%E5%AD%A6%E4%B9%A0-C-%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/"/>
    <url>/2024/11/12/%E5%AD%A6%E4%B9%A0-C-%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/</url>
    
    <content type="html"><![CDATA[<h1 id="小-Tips"><a href="#小-Tips" class="headerlink" title="小 Tips"></a>小 Tips</h1><blockquote><p>⚠需要更加高级，细致到CPU时钟、缓存一致性、缓存命中率和分支预测准确率的估计考虑使用隔壁的 perf 工具<br>⚠gprof只能检查工作在用户态的代码，如printf等内核态的代码无法剖析，<br>⚠在那之前回顾 c++ 程序，函数的声明与函数的定义二者之间区别。<br>✔非常赞赏使用 git 代码管理工具。<br>✔非常赞同合作写代码时规定一个统一的风格规范。</p></blockquote><p><img src="/2024/11/12/%E5%AD%A6%E4%B9%A0-C-%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC%E7%A4%BA%E4%BE%8B.PNG"></p><blockquote><p>✔推荐使用 Makefile 自动构建工具。熟知 cmake 工具使用的话，更好。<br>✔给自己的代码库写一个 README.md 文件</p></blockquote><h2 id="STL-库的使用"><a href="#STL-库的使用" class="headerlink" title="STL 库的使用"></a>STL 库的使用</h2><blockquote><p>📌如果编译器能正确优化这两部分的调用，也许差别不大。但在一个逻辑复杂的类调用里面，指望编译器优化是不可行的。<br>⚠STL库相比指针实现真的慢非常多，因此在考虑 return std::vector std::map std::list 等等 STL 库之前一定要想清楚，真的非 return 这些不可？能不能传一个 vector map list 的引用或者一个指针？</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; <span class="hljs-title">copyReturn</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span>&#123;<br>    map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; res;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        res[i] = i;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">refReturn</span><span class="hljs-params">(map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; &amp;res, <span class="hljs-type">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        res[i]=i;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上两种实现方式都可以获得一个操作后的 map 数据类型，唯一不同的是返回形式，第一种返回 stl 容器本身，第二种 stl 容器则以引用参数的形式传递。<br>二者最大的差异在于返回 stl 容器，会引入额外的 stl 容器的创建和销毁过程。而引用形式则可以避免这部分额外开销。当我以<code>n=10</code>的规模大量调用超过<code>1千万</code>次时，二者的性能有显著的差别。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">wa@HAS-T640:~/EDA8$ g++ b.cpp -o b<br>wa@HAS-T640:~/EDA8$ ./b<br>copyReturn: 35808ms<br>refReturn: 30298ms<br></code></pre></td></tr></table></figure><blockquote><p>⚠std::map 基于红黑树，而 std::unordered_map 是真正意义上基于散列函数，在考虑 O(1) 和 O(logn) 的时间复杂度之前问问自己，自己的数据量是否大到算法的时间复杂度超过了常数部分。</p></blockquote><p>同样的代码，把 map 换成 unordered_map 再次执行会得到以下结果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">wa@HAS-T640:~/EDA8$ g++ b.cpp -o b<br>wa@HAS-T640:~/EDA8$ ./b<br>copyReturn: 42165ms<br>refReturn: 40512ms<br></code></pre></td></tr></table></figure><p>基于 $O(1)$ 实践复杂度散列函数的容器并没有如期望那般在运行时间上打败 $O(nlogn)$ 时间复杂度的容器。</p><h2 id="正确使用-Inline-修饰"><a href="#正确使用-Inline-修饰" class="headerlink" title="正确使用 Inline 修饰"></a>正确使用 Inline 修饰</h2><blockquote><p>⚠需要大量调用的函数，例如仅仅 return 一个 class 内 private 值，也许应该尝试把 private 移动到 public 类型中，减少函数调用带来的性能开销。这便是 inline 修饰的意义。<br>⚠加上 inline 关键字并开启 -O2 以上的优化级别，剩下的靠编译器。当然，要熟知 inline 关键字修饰的本质，写的 inline 关键字才能被真正识别。</p></blockquote><p>Inline 关键字的本质是把函数定义插入到调用的地方，从而减少调用栈的开销。<br>以下举例来自某小队的代码实现。<br>代码中有一处计算用的特别多，计算两个点的曼哈顿距离，他们在 *.hpp 文件声明了这个函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">getManhatonDistance</span><span class="hljs-params">(Position &amp;u, Position &amp;v)</span></span>;<br></code></pre></td></tr></table></figure><p>然后在对应的<code>*.cpp</code>文件实现这个函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">getManhatonDistance</span><span class="hljs-params">(Position &amp;u, Position &amp;v)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">abs</span>(u.x - v.x) + <span class="hljs-built_in">abs</span>(u.y - v.y);<br>&#125;<br></code></pre></td></tr></table></figure><p>编译程序开启了<code>-O2</code>级别的优化，理论上编译器识别这种<code>inline</code>的函数十分轻松，是不应该出现不优化的情况的。事实不然，测试实际，这个函数被调用42亿次，且都是正常函数调用栈。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs txt">Flat profile:<br><br>Each sample counts as 0.01 seconds.<br>  %   cumulative   self              self     total           <br> time   seconds   seconds    calls   s/call   s/call  name    <br> 38.56      5.19     5.19       94     0.06     0.09  KMeans::assignLabels(std::vector&lt;Position, std::allocator&lt;Position&gt; &gt;&amp;)<br> 37.75     10.27     5.08 4218676471     0.00     0.00  getManhatonDistance(Position&amp;, Position&amp;)<br> 18.28     12.73     2.46        4     0.62     0.97  KMeans::initCenters(std::vector&lt;Position, std::allocator&lt;Position&gt; &gt;&amp;)<br>  5.20     13.43     0.70   146159     0.00     0.00  frame_dummy<br>  0.07     13.44     0.01    49680     0.00     0.00  ClockTreeNode::setFather(ClockTreeNode&amp;)<br>  0.07     13.45     0.01     5885     0.00     0.00  void std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_realloc_insert&lt;int const&amp;&gt;(__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int const&amp;)<br>  0.07     13.46     0.01       51     0.00     0.00  void std::vector&lt;ClockTreeNode, std::allocator&lt;ClockTreeNode&gt; &gt;::_M_realloc_insert&lt;ClockTreeNode const&amp;&gt;(__gnu_cxx::__normal_iterator&lt;ClockTreeNode*, std::vector&lt;ClockTreeNode, std::allocator&lt;ClockTreeNode&gt; &gt; &gt;, ClockTreeNode const&amp;)<br>  0.00     13.46     0.00   101270     0.00     0.00  std::vector&lt;Position, std::allocator&lt;Position&gt; &gt;::_M_default_append(unsigned long)<br>  0.00     13.46     0.00    49681     0.00     0.00  ClockTreeNode::printComponent(std::ostream&amp;)<br>  0.00     13.46     0.00    49680     0.00     0.00  ClockTreeNode::addChild(ClockTreeNode&amp;)<br>  0.00     13.46     0.00      988     0.00     0.00  ClockTreeNode::printNet(std::ostream&amp;)<br>  0.00     13.46     0.00       94     0.00     0.00  KMeans::updateNewCenters(std::vector&lt;Position, std::allocator&lt;Position&gt; &gt;&amp;)<br>  0.00     13.46     0.00       34     0.00     0.00  void std::vector&lt;Position, std::allocator&lt;Position&gt; &gt;::_M_realloc_insert&lt;Position const&amp;&gt;(__gnu_cxx::__normal_iterator&lt;Position*, std::vector&lt;Position, std::allocator&lt;Position&gt; &gt; &gt;, Position const&amp;)<br>  0.00     13.46     0.00        6     0.00     0.00  UnionFind::getRoot(int)<br>  0.00     13.46     0.00        5     0.00     0.00  std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_default_append(unsigned long)<br>  0.00     13.46     0.00        4     0.00     0.00  KMeans::deleteEmpty(std::vector&lt;Position, std::allocator&lt;Position&gt; &gt;&amp;)<br>  0.00     13.46     0.00        4     0.00     3.18  KMeans::fit(std::vector&lt;ClockTreeNode, std::allocator&lt;ClockTreeNode&gt; &gt;&amp;)<br>  0.00     13.46     0.00        2     0.00     0.00  std::vector&lt;double, std::allocator&lt;double&gt; &gt;::_M_default_append(unsigned long)<br>  0.00     13.46     0.00        1     0.00     0.00  _GLOBAL__sub_I__Z16parseProblemFileRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEER11NetlistInfoRSt6vectorI13ClockTreeNodeSaISA_EE<br>  0.00     13.46     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN6KMeans3fitERSt6vectorI13ClockTreeNodeSaIS1_EE<br>  0.00     13.46     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN7safeNum3addEi<br>  0.00     13.46     0.00        1     0.00     0.00  _GLOBAL__sub_I_kmeans<br></code></pre></td></tr></table></figure><p>📌原因出在，*.hpp 只给出程序声明，并没有定义。编译器无法将函数插入到代码块中，也就没有执行 inline 修饰的代码优化。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">getManhatonDistance</span><span class="hljs-params">(Position &amp;u, Position &amp;v)</span></span>; <span class="hljs-comment">// 在 hpp 文件强行修改 inline</span><br><span class="hljs-comment">// 错误方法，注意这只是函数的声明，没有解决错误</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">double</span> <span class="hljs-title">getManhatonDistance</span><span class="hljs-params">(Position &amp;u, Position &amp;v)</span></span>; <span class="hljs-comment">// 会在其他 cpp 文件引起函数未定义的错误</span><br><span class="hljs-comment">// 正确方法是，修改成函数的定义，加上函数实现部分</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">double</span> <span class="hljs-title">getManhatonDistance</span><span class="hljs-params">(Position &amp;u, Position &amp;v)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">abs</span>(u.x - v.x) + <span class="hljs-built_in">abs</span>(u.y - v.y);<br>&#125; <span class="hljs-comment">// 然后在 cpp 中删去这部分实现代码，防止重定义错误</span><br></code></pre></td></tr></table></figure><p>🔥仅这一步，我们就优化了程序 33% 的运行时间。</p><h2 id="判断条件-tips"><a href="#判断条件-tips" class="headerlink" title="判断条件 tips"></a>判断条件 tips</h2><blockquote><p>⚠尽量不要在判断条件中引入过于复杂的函数，执行时间很长的函数。<br>⚠非写不可，需要按照各个函数执行用时从低到高的顺序从左往右写。如果某个条件判断 false 概率更高，则可以适当提前。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">bool</span> result = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">readInputNodes</span>(inputNodeFileName)) <span class="hljs-comment">// 读 Node 文件，并返回 true 和 false 表示是否读完</span><br>&#123;<br>  result = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">readInputTiming</span>(inputTimingFileName) &amp;&amp; result) <span class="hljs-comment">// 读 timing 文件，返回 true 和 false 表示是否读完</span><br>&#123; <span class="hljs-comment">// 这里是明显存在依赖性的，Node 读取不正确，后续的时序关键就没必要继续执行，直接返回。</span><br>  <span class="hljs-comment">// 但是这样的顺序，程序会先执行函数，然后判断 result 的状态，</span><br>  <span class="hljs-comment">// 如果 result 为 false 那么函数的执行已经没有任何意义了。</span><br>  result = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-comment">// 以下是正确写法</span><br><span class="hljs-keyword">if</span> (result &amp;&amp; !<span class="hljs-built_in">readInputNets</span>(inputNetFileName))&#123;&#125; <span class="hljs-comment">// 读 net 文件，……</span><br></code></pre></td></tr></table></figure><h2 id="makefile-自动构建工具的使用"><a href="#makefile-自动构建工具的使用" class="headerlink" title="makefile 自动构建工具的使用"></a>makefile 自动构建工具的使用</h2><blockquote><p>📌建议使用自动化构建工具。<br>⚠但是本比赛不推荐 cmake 工具，因为 cmake 的语法复杂，上手难度较高，日后管理大型项目构建时，再学也来得及。</p></blockquote><p>在当前文件夹内创建<code>Makefile</code>文件，并以扁平式分布所有的源代码文件。<br>例如，程序需要<code>global.cpp</code> <code>util.cpp</code> <code>rsmt.cpp</code> <code>arch.cpp</code> <code>lib.cpp</code> <code>object.cpp</code> <code>netlist.cpp</code> <code>main.cpp</code> <code>algorithm.cpp</code>共计 9 个源代码文件编译得到，写出以下的 makefile 内容。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs makefile">SRC = global.cpp util.cpp rsmt.cpp arch.cpp lib.cpp object.cpp netlist.cpp main.cpp algorithm.cpp<br>OBJ = $(SRC:.cpp=.o)<br>CC = g++<br><br>CFLAGS = -Wall -Wextra -std=c++11<br>CFLAGS += -fopenmp -g<br><br><span class="hljs-section">all: checker</span><br><br><span class="hljs-section">checker: <span class="hljs-variable">$(OBJ)</span></span><br>    <span class="hljs-variable">$(CC)</span> <span class="hljs-variable">$(CFLAGS)</span> -o main <span class="hljs-variable">$(OBJ)</span><br><br><span class="hljs-section">%.o: %.cpp</span><br>    <span class="hljs-variable">$(CC)</span> <span class="hljs-variable">$(CFLAGS)</span> -c <span class="hljs-variable">$&lt;</span> -o <span class="hljs-variable">$@</span><br><br><span class="hljs-section">clean:</span><br>    rm -f main <span class="hljs-variable">$(OBJ)</span><br></code></pre></td></tr></table></figure><p>其中，以下规定了当前程序内编译的内容，对象和编译参数</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs makefile">SRC = global.cpp util.cpp rsmt.cpp arch.cpp lib.cpp object.cpp netlist.cpp main.cpp algorithm.cpp // 编译源文件<br>OBJ = $(SRC:.cpp=.o) // 指定编译对象<br>CC = g++ // 指定编译器<br><br>CFLAGS = -Wall -Wextra -std=c++11 // 规定基本编译参数<br>CFLAGS += -fopenmp -g // 附加参数<br></code></pre></td></tr></table></figure><p>然后是编译指令，checker 指令规定了，我们在终端执行<code>make checker</code>命令时会发生什么。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">checker: <span class="hljs-variable">$(OBJ)</span> // 冒号后表示编译 checker 依赖，$ 符号表示以变量形式看待</span><br>    <span class="hljs-variable">$(CC)</span> <span class="hljs-variable">$(CFLAGS)</span> -o main <span class="hljs-variable">$(OBJ)</span> // 翻译过来这里写的是 g++ -Wall -Wextra -std=c++11 -fopenmp -g -o main [*.o]<br>    <br><span class="hljs-section">%.o: %.cpp // 实际上 <span class="hljs-variable">$(OBJ)</span> 恰好是 global.o util.o 等等的缩写，会匹配到这个规则</span><br>    <span class="hljs-variable">$(CC)</span> <span class="hljs-variable">$(CFLAGS)</span> -c <span class="hljs-variable">$&lt;</span> -o <span class="hljs-variable">$@</span><br></code></pre></td></tr></table></figure><p>最后是用于清理的指令，在终端执行<code>make clean</code>实际上执行的是<code>rm -f main global.o util.o ...</code></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">clean:</span><br>    rm -f main <span class="hljs-variable">$(OBJ)</span><br></code></pre></td></tr></table></figure><h1 id="一、Gprof工具的使用"><a href="#一、Gprof工具的使用" class="headerlink" title="一、Gprof工具的使用"></a>一、Gprof工具的使用</h1><blockquote><p>⚠工具主要用于分析函数调用，不要引入多线程，尤其是锁机制会误导热点分析。<br>⚠建议开启编译器 -O2 级别的优化。</p></blockquote><p>gprof 通常作为 GNU Binutils 的一部分，在大多是 Linux 发行版中已经集成。<br>gprof 是 GNU 项目中性能分析工具，用于分析每个 C、C++ 函数调用和函数调用时间。它通过测量程序执行过程中的函数调用频率和运行时间来帮助定位程序热点和热点函数。从而定位可能的性能瓶颈。</p><h2 id="1、使用步骤"><a href="#1、使用步骤" class="headerlink" title="1、使用步骤"></a>1、使用步骤</h2><h3 id="a、编译前"><a href="#a、编译前" class="headerlink" title="a、编译前"></a>a、编译前</h3><p>在使用 gcc 编译 C++ 程序代码时，在编译参数内加入 <code>-pg</code> 告诉编译器引入 gprof 代码，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">g++ -g -pg -o main main.cpp<br></code></pre></td></tr></table></figure><p>这段程序会包含带有 <code>gprof</code> 性能分析所需的全部代码。<br>🔥正式提交程序记得删除编译参数 <code>-pg</code> ，性能分析所需代码本身会拖慢程序。</p><h3 id="b、像平常一样运行程序"><a href="#b、像平常一样运行程序" class="headerlink" title="b、像平常一样运行程序"></a>b、像平常一样运行程序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./main<br></code></pre></td></tr></table></figure><p>正常运行程序后，会在本地目录下生成一个 <code>gmon.out</code> 的文件，文件内记录程序运行的所有信息。</p><h3 id="c、可视化报告"><a href="#c、可视化报告" class="headerlink" title="c、可视化报告"></a>c、可视化报告</h3><p>调用 <code>gprof</code> 工具可视化 <code>gmon.out</code> 文件，执行一下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gprof main gmon.out &gt; analysis.txt<br></code></pre></td></tr></table></figure><p>得到一个 <code>analysis.txt</code> 的文本文件，里面记载程序运行的函数调用信息和数据信息。</p><h2 id="2、如何分析"><a href="#2、如何分析" class="headerlink" title="2、如何分析"></a>2、如何分析</h2><h3 id="a、第一部分"><a href="#a、第一部分" class="headerlink" title="a、第一部分"></a>a、第一部分</h3><p>初次打开 <code>analysis.txt</code> 文件，看到内容如下：<br><img src="/2024/11/12/%E5%AD%A6%E4%B9%A0-C-%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/a6e2ecc6-6f1f-46c8-a929-462ef2acdde6.png"></p><p>一列一列来观察：</p><ol><li>第一列说明当前函数运行时间占程序总运行时间的百分比。这里一眼看到 Pin::getTimingCritical() 调用了 12 亿次，占用时间高达 16% ，优化的第一步必然是它。</li><li>第二列是累计运行时间，一般不关注。</li><li>第三列是函数运行时间，可以看到这个函数 Pin::getTimingCritical 总共的运行时间为 3 秒。</li><li>第四列说明函数被调用次数。有时候一个函数运行缓慢不是函数本身问题，是被 call 了太多次。因此函数本身不是优化对象应该重点关照其调用次数。</li></ol><h3 id="b、第二部分"><a href="#b、第二部分" class="headerlink" title="b、第二部分"></a>b、第二部分</h3><p>看完第一部分，可以基本了解程序中热点和热点产生的原因，但是无法告诉你如何去优化，比如知道 <code>Pin::getTimingCritical</code> 函数被调用很多次，但是不知道在哪些地方被调用了。<br>这时候继续向下查看，在大约 <code>1000~5000</code> 行左右的位置，观察到如下所示结果：</p><p><img src="/2024/11/12/%E5%AD%A6%E4%B9%A0-C-%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/91567ac0-37e8-4a4d-bdc2-46f36b471837.png"></p><ol><li>第一列告诉你，当前函数运行时间占总时间的百分比，打头的一定是 main 函数。</li><li>第二列，函数自身用时，不包括函数内部调用的用时，例如 Tile::sendOutOffer 函数占用了 51 秒运行时间的 46 秒，但是自身运行仅仅 0.03 秒，因此 Tile::sendOutOffer 自身不是性能瓶颈，问题在这个函数内部调用上。</li><li>第三列，函数加上内部调用总运行时间。</li><li>第四列，左边是在 main 中该函数调用次数，右边是总调用次数。用于定位调用次数的热点。</li><li>第五列，函数名称，附带的方括号是 index 列的位置。</li></ol><p><img src="/2024/11/12/%E5%AD%A6%E4%B9%A0-C-%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/65488e8e-5fc8-4e38-9bc9-9925e1eb4034.png"></p><p>继续往下，查看 <code>Tile::sendOutOffer</code> 函数的运行时间占比，发现 <code>scorecompute</code> 是大头。并且 <code>Tile::sendOutOffer</code> 贡献了 <code>scoreCompute</code> 超过 99% 的调用次数。<br>基本确定方针，优化 <code>scoreCompute</code> 的运行时间，减少 <code>Tile::sendOutOffer</code> 对 <code>scoreCompute</code> 的非必要调用。</p><h2 id="3、多线程"><a href="#3、多线程" class="headerlink" title="3、多线程"></a>3、多线程</h2><p>这个方法也能看到多线程的程序运行时间，但是不建议。里面统计的函数调用次数不可信，子函数调用时间基本不可信。但是在锁机制等相关信息的探查上可以看出一些端倪。<br>比如说：如果程序使用过多锁机制，锁同步是程序缓慢的重要原因，那么可以看到 lock 的加锁函数调用占用了大量时间。</p><h1 id="二、valgrind-多线程性能分析"><a href="#二、valgrind-多线程性能分析" class="headerlink" title="二、valgrind 多线程性能分析"></a>二、valgrind 多线程性能分析</h1><blockquote><p>想到吧，内存检测工具也提供了对于多线程锁竞争的性能分析。这里尝试使用其中线程分析工具来定位多线程程序运行缓慢问题。<br>本质上是使用 ValGrind 的函数调用分析工具实现的。</p></blockquote><p>一些说明</p><ol><li>相比 gprof 在编译程序时不需要额外参数，但是推荐加上 <code>-g</code> 调试参数。</li><li>这个工具不建议开启任何的代码优化选项，如 <code>-O2</code> 、 <code>-O3</code> 等等，防止定位到错误的代码行。</li><li>原始输出十分难以阅读，建议使用部分开源的数据阅读器（如 <a href="https://github.com/KDE/kcachegrind"><code>kcachegrind</code></a>）进行可视化性能分析。</li></ol><h2 id="1、使用步骤-1"><a href="#1、使用步骤-1" class="headerlink" title="1、使用步骤"></a>1、使用步骤</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">valgrind --tool=callgrind ./a.out<br></code></pre></td></tr></table></figure><p>如果是多线程，那么需要额外加上一行参数，<code>valgrind</code> 工具会为每个线程单独生成一个记录文件 <code>callgrind.out.xxx</code> （其中的xxx代表进程号），方便之后探查。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">valgrind --tool=callgrind -separate-threads=<span class="hljs-built_in">yes</span> ./a.out<br></code></pre></td></tr></table></figure><p>如果使用上面的工具，则会生成多个记录文件 <code>callgrind.out.xxx</code> 和 <code>callgrind.out.xxx-01</code> …… 后面的数字代表不同的线程。</p><h2 id="2、如何分析-1"><a href="#2、如何分析-1" class="headerlink" title="2、如何分析"></a>2、如何分析</h2><p>找到上一步生成的文件 <code>callgrind.out.xxx</code> ，如果有可视化分析工具，可以使用工具打开文件。这里将要说明如果没有下载工具如何去分析程序。</p><h3 id="a、没有可视化工具时"><a href="#a、没有可视化工具时" class="headerlink" title="a、没有可视化工具时"></a>a、没有可视化工具时</h3><p>利用自带的 <code>callgrind_annotate</code> 工具，然后把输出写到 run.log 上并打开。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">callgrind_annotate ./callgrind.out.xxx &gt; run.log<br></code></pre></td></tr></table></figure><p>打开文件发现如下：<br><img src="/2024/11/12/%E5%AD%A6%E4%B9%A0-C-%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/a2efc85e-e7de-41c0-bb43-8725d8eb6b4a.png"></p><ol><li>忽略<font color="#00b0f0">淡蓝色框</font>内容，那只是一些基本信息。</li><li><font color="#ff0000">红色框1</font>，函数头开始部分是一个绝对路径，说明是标准库的调用，这里举例是 malloc 和 free 标准库。</li><li><font color="#ff0000">红色框2</font>，函数头是 <code>???</code> 是本地代码，编译时没有绝对路径，可以以此区分标准库和自己实现的部分。<br>但是，这个程序的功能也就到此为止了，只能看到哪些函数的调用次数最多，完全看不见各个函数的执行时间与调用栈的分布情况。</li></ol><h3 id="b、有可视化工具时"><a href="#b、有可视化工具时" class="headerlink" title="b、有可视化工具时"></a>b、有可视化工具时</h3><p>这里因为打不开服务器的远程桌面了，网上找了一个类似的图，效果差不多。<br><img src="/2024/11/12/%E5%AD%A6%E4%B9%A0-C-%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/d64eea68-5902-4dd5-9705-9d0cc87c1550.jfif"></p><h2 id="3、番外"><a href="#3、番外" class="headerlink" title="3、番外"></a>3、番外</h2><blockquote><p>valgraind工具还可以检测锁竞争和死锁情况。使用<code>helgrind</code>工具可以检测锁竞争情况。</p></blockquote><h1 id="三、Vtune多线程分析工具"><a href="#三、Vtune多线程分析工具" class="headerlink" title="三、Vtune多线程分析工具"></a>三、Vtune多线程分析工具</h1><blockquote><p>仅Intel的CPU可用，具体可以参考intel的官网手册。<del>因为我是 AMD 铁粉</del>，没有 intel 的 U 就没有介绍。</p></blockquote><p>将来用上了再考虑学习。</p>]]></content>
    
    
    
    <tags>
      
      <tag>分享</tag>
      
      <tag>学习</tag>
      
      <tag>性能分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[折腾]编译pytorch</title>
    <link href="/2024/09/18/%E6%8A%98%E8%85%BE-%E7%BC%96%E8%AF%91pytorch/"/>
    <url>/2024/09/18/%E6%8A%98%E8%85%BE-%E7%BC%96%E8%AF%91pytorch/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>最好全程科学上网，预计需要5~7GB的下载量。<br>本教程尝试在 Windows 的 Docker 环境下编译给 Ubuntu20.04 的 torch&#x3D;2.3.0 CUDA11.7 。（至于为什么是这个详见LLM在CUDA11.7安装经历）</p></blockquote><h1 id="零、准备工作"><a href="#零、准备工作" class="headerlink" title="零、准备工作"></a>零、准备工作</h1><blockquote><p>⚠⚠⚠记住一定要先检查目标机器是否有NVIDIA驱动和CUDA环境，CUDNN最好也检查一下，否则编译好了在那边也装不上。</p></blockquote><ol><li>从<a href="https://github.com/pytorch/pytorch">github&#x2F;pytorch</a>处获得最新的pytorch源代码，之后的命令执行是参考<code>DockerFile</code>来编写的。</li><li>从<code>NVIDIA CUDA 11.7</code>处获得 11.7 CUDA 的toolkit包。在开始前需要下载这个文件。</li><li>基础镜像参考<code>Dockerfile</code>使用的是<code>Ubuntu:22.04</code>（MD从头开始还不如直接下一个 CUDA 11.7 的镜像，记住要使用和目标计算机一样的环境，例如本次使用<code>Ubuntu:20.04</code>）也需要提前安装完毕。</li><li>仔细观察目标环境的配置，包括但不限于CUDA安装位置、CUDNN头文件位置、安装Python等等，需要在容器中复现。</li></ol><h1 id="一、开始编译"><a href="#一、开始编译" class="headerlink" title="一、开始编译"></a>一、开始编译</h1><h2 id="1、配置docker"><a href="#1、配置docker" class="headerlink" title="1、配置docker"></a>1、配置docker</h2><p>建议使用以下命令启动<code>ubuntu:22.04</code>镜像，默认的内存空间可能不够用，需要额外扩充一部分swap空间。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --name torch_compile --privileged -it ubuntu:20.04 /bin/bash<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -it –cap-add SYS_ADMIN ubuntu:20.04 /bin/bash<br></code></pre></td></tr></table></figure><p>进入<code>ubuntu:22.04</code>后第一件事情是更新环境，安装必备工具（最好科学上网）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt-get update &amp;&amp; DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \<br>        build-essential \<br>        ca-certificates \<br>        ccache \<br>        cmake \<br>        curl \<br>        git \<br>        wget \<br>        libjpeg-dev \<br>        libpng-dev &amp;&amp; \<br>    <span class="hljs-built_in">rm</span> -rf /var/lib/apt/lists/*<br></code></pre></td></tr></table></figure><p>另外建议先安装 <font color="#ff0000">NVIDIA CUDA 11.7 toolkit</font> 。</p><h2 id="2、安装python环境"><a href="#2、安装python环境" class="headerlink" title="2、安装python环境"></a>2、安装python环境</h2><p>指定一些运行变量，下载 Miniconda 包安装 Python 环境。Python和目标机器上的一致（这里因为目标机器上的Python是3.11版本的，这里指定<code>PYTHON_VERSION</code>为3.11）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">/usr/sbin/update-ccache-symlinks<br><span class="hljs-built_in">mkdir</span> /opt/ccache &amp;&amp; ccache --set-config=cache_dir=/opt/ccache<br><span class="hljs-built_in">export</span> PATH=/opt/conda/bin:<span class="hljs-variable">$PATH</span><br><span class="hljs-built_in">export</span> PYTHON_VERSION=3.11<br><span class="hljs-built_in">export</span> MINICONDA_ARCH=x86_64<br>curl -fsSL -v -o ~/miniconda.sh -O  <span class="hljs-string">&quot;https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-<span class="hljs-variable">$&#123;MINICONDA_ARCH&#125;</span>.sh&quot;</span><br></code></pre></td></tr></table></figure><p>找到<a href="https://github.com/pytorch/pytorch">github&#x2F;pytorch</a>文件夹中的<code>requirements.txt</code>文件。并复制到docker中存放pytorch源码的文件夹下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> [path-to-pytorch-source-code]/requirements.txt .<br></code></pre></td></tr></table></figure><p>然后执行 python 环境的安装，这里就安装到<code>/opt/conda</code>这个位置了，添加环境变量以保证conda命令的正确识别。不建议改动安装位置，因为本教程之后许多指令基于这个安装位置编写。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x ~/miniconda.sh &amp;&amp; \<br>    bash ~/miniconda.sh -b -p /opt/conda &amp;&amp; \<br>    /opt/conda/bin/conda install -y python=<span class="hljs-variable">$&#123;PYTHON_VERSION&#125;</span> cmake conda-build pyyaml numpy ipython &amp;&amp; \<br>    /opt/conda/bin/python -mpip install -r requirements.txt &amp;&amp; \<br>    /opt/conda/bin/conda clean -ya<br><span class="hljs-built_in">export</span> PATH=/opt/conda/bin:<span class="hljs-variable">$PATH</span><br><span class="hljs-comment"># conda install mkl</span><br><span class="hljs-comment"># conda install mkl-include</span><br></code></pre></td></tr></table></figure><h2 id="3、补齐代码"><a href="#3、补齐代码" class="headerlink" title="3、补齐代码"></a>3、补齐代码</h2><p>下载下来的pytorch源码仅包含pytorch，而pytorch自己的依赖还需要二次下载。<br>把<code>github/pytorch</code>所有文件下载到&#x2F;opt&#x2F;pytorch这个位置，最好使用 <code>git</code> 命令来获得，直接下载获得的包缺少第三方库，需要使用以下命令进行库文件的补齐。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /opt<br>git <span class="hljs-built_in">clone</span> https://github.com/pytorch/pytorch.git<br><span class="hljs-built_in">cd</span> /opt/pytorch<br>git checkout v2.3.0<br>git submodule update --init --recursive<br></code></pre></td></tr></table></figure><p>建议多次执行，以确保所有的库都能下载下来。如果编译时报库文件的错，需要删掉整个对应的库文件，重新下载。</p><h2 id="4、设置编译参数"><a href="#4、设置编译参数" class="headerlink" title="4、设置编译参数"></a>4、设置编译参数</h2><p><code>PYTHON_VERSION</code>很好理解，目标机器上安装什么版本的python就指定什么。<code>CUDA_VERSION</code>根据目标机器上实际的CUDA版本决定（机器上只有CUDA11.7）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> PYTHON_VERSION=3.11<br><span class="hljs-built_in">export</span> CUDA_VERSION=11.7<br><span class="hljs-built_in">export</span> CUDA_CHANNEL=nvidia<br><span class="hljs-built_in">export</span> INSTALL_CHANNEL=pytorch-nightly<br><span class="hljs-comment"># Automatically set by buildx</span><br>/opt/conda/bin/conda update -y -n base -c defaults conda<br><span class="hljs-comment">#/opt/conda/bin/conda install -c &quot;$&#123;INSTALL_CHANNEL&#125;&quot; -y python=$&#123;PYTHON_VERSION&#125;</span><br><span class="hljs-comment">#/opt/conda/bin/conda install -c &quot;$&#123;INSTALL_CHANNEL&#125;&quot; -c &quot;$&#123;CUDA_CHANNEL&#125;&quot; -y &quot;python=$&#123;PYTHON_VERSION&#125;&quot; pytorch torchvision torchaudio &quot;pytorch-cuda=$(echo $CUDA_VERSION | cut -d&#x27;.&#x27; -f 1-2)&quot;</span><br>/opt/conda/bin/conda clean -ya<br></code></pre></td></tr></table></figure><p>编译，具体有哪些参数可选可以检查 <code>setup.py</code> 文件，另外以下代码中的<code>CUDA_HOME</code>变量需要自行确定。</p><blockquote><p>⚠在执行下面命令前先检查<a href="#%E4%BA%8Cgpu%E4%BD%BF%E7%94%A8">GPU使用章节</a>是否正确安装。<br>⚠编译过程需要较多内存空间，提前分配较大的swap空间或者加上<code>MAX_JOBS=1</code>来限制同时编译的数量防止OOM错误。但是会显著降低编译速度，如果内存够大，建议按照CPU核心数量来设置。<br>⚠正式开始编译前最好检查一次生成的编译配置，是否正确开启了 <code>USE_CUDA</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /opt/pytorch<br>make triton<br><span class="hljs-built_in">export</span> USE_CUDA=ON<br><span class="hljs-built_in">export</span> PYTORCH_BUILD_NUMBER=2.3.0<br><span class="hljs-built_in">export</span> USE_NUMPY=ON<br><span class="hljs-built_in">export</span> USE_QNNPACK=ON<br><span class="hljs-built_in">export</span> USE_NNPACK=ON<br><span class="hljs-built_in">export</span> USE_DISTRIBUTED=ON<br><span class="hljs-built_in">export</span> BLAS=MKL <span class="hljs-comment"># 出现 mkl_gemm_bf16bf16f32: ATen not compiled with MKL support 问题</span><br><span class="hljs-built_in">export</span> USE_CUDNN=OFF  <span class="hljs-comment"># 超算中心没有（我TM……）一定要注意，有CUDA不等于有CUDNN</span><br><span class="hljs-comment"># TORCH_CUDA_ARCH_LIST=&quot;7.0 7.2 7.5 8.0 8.6 8.7 8.9 9.0 9.0a&quot; TORCH_NVCC_FLAGS=&quot;-Xfatbin -compress-all&quot; CMAKE_PREFIX_PATH=&quot;/opt/conda/bin&quot;   USE_MPI=1 USE_OPENMP=1 USE_FLASH_ATTENTION=1 USE_LMDB=1 PYTORCH_BUILD_NUMBER=2.3.0 CUDA_HOME= </span><br>python setup.py bdist_wheel<br></code></pre></td></tr></table></figure><p>然后可以在<code>/opt/pytorch/dist</code>目录下找到刚刚编译好的可以直接安装的模块。<br>安装后执行下面的指令可以检查torch是否支持调用CUDA</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python -c <span class="hljs-string">&#x27;import torch ; print(torch.cuda._is_compiled())&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="二、GPU使用"><a href="#二、GPU使用" class="headerlink" title="二、GPU使用"></a>二、GPU使用</h1><p>❗以下指令均需要root权限，如果是docker环境可以无视。<br>忽然发现运行从<a href="https://developer.nvidia.com/cuda-11-7-0-download-archive?target_os=Linux&target_arch=x86_64&Distribution=Ubuntu&target_version=20.04&target_type=runfile_local">NVIDIA CUDA 11.7</a>这里获得的包时，不需要安装 Driver 可以直接安装 toolkit ，反正只是跑编译而已，那么有没有 Driver 都无所谓了。<del>（亏我还搞了好久弄 WSL 安装 NVIDIA Driver，艹）</del></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x cuda_11.7.0_515.43.04_linux.run<br>sh cuda_11.7.0_515.43.04_linux.run <br></code></pre></td></tr></table></figure><p>当你看到下面的内容时，说明 CUDA 已经安装完毕，需要向<code>PATH</code>变量加入cuda的可执行文件位置，以及lib位置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@2345f5f46b09:~# sh cuda_11.7.0_515.43.04_linux.run<br>===========<br>= Summary =<br>===========<br><br>Driver:   Not Selected<br>Toolkit:  Installed <span class="hljs-keyword">in</span> /usr/local/cuda-11.7/<br><br>Please make sure that<br> -   PATH includes /usr/local/cuda-11.7/bin<br> -   LD_LIBRARY_PATH includes /usr/local/cuda-11.7/lib64, or, add /usr/local/cuda-11.7/lib64 to /etc/ld.so.conf and run ldconfig as root<br><br>To uninstall the CUDA Toolkit, run cuda-uninstaller <span class="hljs-keyword">in</span> /usr/local/cuda-11.7/bin<br>***WARNING: Incomplete installation! This installation did not install the CUDA Driver. A driver of version at least 515.00 is required <span class="hljs-keyword">for</span> CUDA 11.7 functionality to work.<br>To install the driver using this installer, run the following <span class="hljs-built_in">command</span>, replacing &lt;CudaInstaller&gt; with the name of this run file:<br>    <span class="hljs-built_in">sudo</span> &lt;CudaInstaller&gt;.run --silent --driver<br><br>Logfile is /var/log/cuda-installer.log<br></code></pre></td></tr></table></figure><p>⚠注意这里只安装了CUDA，没有<code>CUDNN</code>，仍然需要到<a href="https://developer.nvidia.com/cudnn">CUDNN</a>这里下载相关文件，或者使用指令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://developer.download.nvidia.com/compute/cudnn/9.2.1/local_installers/cudnn-local-repo-ubuntu2204-9.2.1_1.0-1_amd64.deb<br>dpkg -i cudnn-local-repo-ubuntu2204-9.2.1_1.0-1_amd64.deb<br>apt-get update<br><span class="hljs-comment"># 然后根据CUDA11还是CUDA12按照需求运行下面的指令，个人实际测试发现 dpkg 之后cudnn就能找到了</span><br>apt install cudnn-cuda-11<br><span class="hljs-comment"># 或者</span><br>apt install cudnn-cuda-12<br></code></pre></td></tr></table></figure><p>随后利用以下指令可以检查cudnn是否成功安装。看到下图所示说明CUDNN好了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /usr/include/cudnn_version.h | grep CUDNN_MAJOR -A 2<br></code></pre></td></tr></table></figure><p><img src="/2024/09/18/%E6%8A%98%E8%85%BE-%E7%BC%96%E8%AF%91pytorch/5ac1836c-f60d-49e8-beca-c0d1cbe36316.png"></p><h1 id="三、tmux多终端工具使用"><a href="#三、tmux多终端工具使用" class="headerlink" title="三、tmux多终端工具使用"></a>三、tmux多终端工具使用</h1><p>在此期间会打开许多窗口用于编译和测试，在本地多开终端不仅十分繁琐，而且会忘记每个终端的功能，且不能充分利用现有终端的空间。因此<code>tmux</code>工具应运而生，这里简要介绍一部分其中的快捷键，足以应付本场景。<br>使用以下指令创建一个<code>tmux</code>终端服务。指定名字不仅容易复现，而且方便日后恢复工作台。这里因为我们是编译pytorch，所以取名为“torch”。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tmux new -s torch<br></code></pre></td></tr></table></figure><p>简要介绍一下一些基础快捷键（⚠在进入tmux终端后才有效）</p><ol><li><code>Ctrl</code>+<code>B</code>，<code>&quot;</code>是垂直分割当前终端。</li><li><code>Ctrl</code>+<code>B</code>，<code>%</code>是水平分割当前终端。</li><li><code>Ctrl</code>+<code>B</code>，<code>x</code>是关闭当前光标所在终端。</li><li><code>Ctrl</code>+<code>B</code>，<code>d</code>是离开当前终端，日后可以利用名字回到工作台。</li><li><code>Ctrl</code>+<code>B</code>，任意方向键切换激活的终端。<br>离开后可以使用以下指令重新连接回当前终端。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tmux attach-sesstion -t torch<br></code></pre></td></tr></table></figure></li></ol><h1 id="四、错误解决"><a href="#四、错误解决" class="headerlink" title="四、错误解决"></a>四、错误解决</h1><h2 id="1、c-fatal-error-Killed-signal-terminated-program-cc1plus"><a href="#1、c-fatal-error-Killed-signal-terminated-program-cc1plus" class="headerlink" title="1、c++: fatal error: Killed signal terminated program cc1plus"></a>1、c++: fatal error: Killed signal terminated program cc1plus</h2><p>这是因为编译过程中出现内存不足导致的。</p><h3 id="a、方案一"><a href="#a、方案一" class="headerlink" title="a、方案一"></a>a、方案一</h3><p>临时扩充虚拟内存，可以按照下面的步骤进行扩充（以下均指令需要sudo权限，而且如果不按照<a href="#1%E9%85%8D%E7%BD%AEdocker">配置docker</a>章节来，到这里就无法扩充虚拟内存）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /var/cache/swap/<br><span class="hljs-comment"># 这里的含义是swap空间大小等于 bs*count=4GB 需要自行修改</span><br><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/zero of=/var/cache/swap/swap0 bs=64M count=64<br><span class="hljs-built_in">chmod</span> 0600 /var/cache/swap/swap0<br>mkswap /var/cache/swap/swap0<br>swapon /var/cache/swap/swap0<br></code></pre></td></tr></table></figure><p>如果执行第6条指令发生如下错误，需要检查启动镜像是否以特权模式运行容器。如果不是，请使用<code>方案二</code>，或者重新开始配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">swapon failed: Operation not permitted<br></code></pre></td></tr></table></figure><p>最后执行以下指令能看到自己添加的新 swap 分区即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">swapon -s<br></code></pre></td></tr></table></figure><h3 id="b、方案二"><a href="#b、方案二" class="headerlink" title="b、方案二"></a>b、方案二</h3><p>设置同时编译的线程数量，最好预留每个编译线程2GB的内存空间。自行调整<code>MAX_JOBS</code>后的数字。如果开启 CUDA 编译需要每个线程预留 4~6GB 的内存空间。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> MAX_JOBS=2<br>python setup.py bdist_wheel<br></code></pre></td></tr></table></figure><h2 id="2、ValueError-could-not-identify-license-file-for-third-party-opentelemetry-cpp-tools-vcpkg-ports-sigslot"><a href="#2、ValueError-could-not-identify-license-file-for-third-party-opentelemetry-cpp-tools-vcpkg-ports-sigslot" class="headerlink" title="2、ValueError: could not identify license file for third_party&#x2F;opentelemetry-cpp&#x2F;tools&#x2F;vcpkg&#x2F;ports&#x2F;sigslot"></a>2、ValueError: could not identify license file for third_party&#x2F;opentelemetry-cpp&#x2F;tools&#x2F;vcpkg&#x2F;ports&#x2F;sigslot</h2><p>出现这个错误是因为 third_party 出现了不该出现的第三方依赖。检查是否在第三步git checkout命令之前运行了git submodule。用以下命令解决冲突问题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout -f v2.3.0<br><span class="hljs-built_in">rm</span> [出现错误的文件夹]<br></code></pre></td></tr></table></figure><h2 id="3、Import-Error-…-libstdc-so-6-version-‘GLIBCXX-3-4-30’-not-found"><a href="#3、Import-Error-…-libstdc-so-6-version-‘GLIBCXX-3-4-30’-not-found" class="headerlink" title="3、Import Error: …&#x2F;libstdc++.so.6: version ‘GLIBCXX_3.4.30’ not found"></a>3、Import Error: …&#x2F;libstdc++.so.6: version ‘GLIBCXX_3.4.30’ not found</h2><p>来自conda的错误，一般是因为conda安装目录下的<code>libstdc++.so.6</code>没有这个标记。可以先用下面的指令检查内核版本是否有这个标记，然后再考虑是否升级内核。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">strings /usr/lib/x86_64-linux-gnu/libstdc++.so.6 | grep GLIBCXX<br></code></pre></td></tr></table></figure><p>这里我很幸运的发现<code>GLIBCXX_3.4.30</code>存在，不用更新内核了。下一步就是更新conda的<code>libstdc++.so.6</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> [path to your conda]/lib<br><span class="hljs-comment"># 备份原始文件</span><br><span class="hljs-built_in">mv</span> libstdc++.so.6 libstdc++.so.6.old<br><span class="hljs-comment"># 创建新的软链接</span><br><span class="hljs-built_in">ln</span> -s /usr/lib/x86_64-linux-gnu/libstdc++.so.6 libstdc++.so.6<br></code></pre></td></tr></table></figure><h2 id="4、ImportError-cannot-import-name-‘version‘-from-‘torchvision’"><a href="#4、ImportError-cannot-import-name-‘version‘-from-‘torchvision’" class="headerlink" title="4、ImportError: cannot import name ‘version‘ from ‘torchvision’"></a>4、ImportError: cannot import name ‘<strong>version</strong>‘ from ‘torchvision’</h2><p>问题原因：似乎是自己编译的torchvision就是有这个bug，安装目录下没有<code>version.py</code>这个文件。<br>解决方法：进入<code>anaconda/envs/[your env]/lib/[python3.10]/site-pages/torchvision</code>下创建文件<code>version.py</code>文件，然后写入一下的示例。⚠具体数值应该和你编译的版本一致。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">__version__ = <span class="hljs-string">&#x27;0.18.0+cpu&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>折腾</tag>
      
      <tag>编译</tag>
      
      <tag>pytorch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[折腾]安装pyrealsense</title>
    <link href="/2021/09/12/%E6%8A%98%E8%85%BE-%E5%AE%89%E8%A3%85pyrealsense/"/>
    <url>/2021/09/12/%E6%8A%98%E8%85%BE-%E5%AE%89%E8%A3%85pyrealsense/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在实验室做无人机的深度相机测试遇到的小问题。在此记录一下当时的解决方法。</p><p>系统环境为</p><table><thead><tr><th>硬件</th><th>版本</th></tr></thead><tbody><tr><td>开发板</td><td>Nvidia nano</td></tr><tr><td>相机</td><td>intelRealsense D435i</td></tr><tr><td>系统版本</td><td>ubuntu 18.04</td></tr><tr><td>python</td><td>3.7.10</td></tr></tbody></table><h1 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h1><p>本文以conda下的drone环境做演示。</p><ol><li>从intelRealsense中下载源文件<a href="https://github.com/IntelRealSense/librealsense">IntelRealsense</a>。</li><li>安装cmake-gui软件，方便调整编译参数，能够可视化调整最好。当然也不是非装不可，不过在这里就不演示不安装要如何调整编译参数了。</li><li>在librealsense文件夹下打开终端，输入<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cmake-gui<br></code></pre></td></tr></table></figure></li><li>重点关注两个选项其中的PYTHON-EXECUTABLE和CMAKE_INSTALL_PREFIX两个参数，其中前一个会决定编译的是哪个版本的python包，第二个决定这个python包会安装到哪里去。<ol><li>设置PYTHON-EXECUTABLE&#x3D;&#x2F;(conda path)&#x2F;envs&#x2F;drone(你可以换成你自己的环境位置)&#x2F;bin&#x2F;python3.7。</li><li>设置CMAKE_INSTALL_PREFIX&#x3D;&#x2F;(conda path)&#x2F;envs&#x2F;drone(同上)&#x2F;。</li></ol></li><li>完成上面的配置之后，点击generate生成配置文件（没有gui用命令行也是一致的，找到对应参数修改），然后。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make -j8 &amp;&amp; make install<br></code></pre></td></tr></table></figure></li></ol><h1 id="二、折腾"><a href="#二、折腾" class="headerlink" title="二、折腾"></a>二、折腾</h1><h2 id="1、-ERROR-no-pipline"><a href="#1、-ERROR-no-pipline" class="headerlink" title="1、[ERROR]no pipline"></a>1、[ERROR]no pipline</h2><p>| 问题表现为：import pyrealsense2 as rs 命令可以通过，但是<code>pipeline=rs.pipeline</code>就会报错，内容为 <code>pyrealsense2</code> 没有 <code>pipline</code> 。</p><p>问题原因：这是安装的小问题，makefile中似乎没有写好<code>init.py</code>文件的安装。<br>解决方法：把<code>librealsense/wrapper/python/pyrealsense</code>底下的<code>init.py</code>文件拷贝到<code>(conda path)/envs/drone/lib/python3.7/site-packages/pyrealsense2</code>下即可。</p>]]></content>
    
    
    
    <tags>
      
      <tag>折腾</tag>
      
      <tag>pyrealsense</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[学习]多线程</title>
    <link href="/2021/05/05/%E5%AD%A6%E4%B9%A0-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <url>/2021/05/05/%E5%AD%A6%E4%B9%A0-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="N体问题"><a href="#N体问题" class="headerlink" title="N体问题"></a>N体问题</h1><p>模拟一个太空中有N个星体，各个星体有三个维度的速度和位置，相互之间受到万有引力影响运动的效果。模拟最小时间分位点为0.005秒，本题目中万有引力常数设定为1，星体的初始数据在“nbody.txt”文本文件中。要求用单线程和多线程分别完成一份，将迭代20次后的数据输出到文件中，并且比较串行程序和多线程之间的计算结果差异。</p><h1 id="一、实现方案"><a href="#一、实现方案" class="headerlink" title="一、实现方案"></a>一、实现方案</h1><p>模拟方案涉及大量计算，对于算法的考察较小，考研对数据结构和计算方式设计，以及对与多线程openmp和pthread库的运用。</p><ul><li>实验环境：ubuntu20.04（Hype-V）</li><li>编译器版本：g++ 9.3.0</li></ul><h2 id="1、输入数据"><a href="#1、输入数据" class="headerlink" title="1、输入数据"></a>1、输入数据</h2><p>一个txt文件，其中包括1024个星体的7项数据，一行为一个星体，分别是星体质量，星体在x、y、z上的位置，星体在x、y、z上的速度。</p><p>对于一个星体需要存放的数据如下，主要是x、y、z空间位置，sx、sy、sz速度和mass星体质量，还有计算时一些临时变量，如计算1号星体和其他星体相互作用力总和的变量，引入这个变量还有一个作用，可以减少误差（主要是指除法的误差累积）。星体结构体数据如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">planet</span> <span class="hljs-comment">// 星体结构体</span><br>&#123;<br><span class="hljs-type">double</span> mass;<span class="hljs-comment">// body质量</span><br><span class="hljs-type">double</span> sx, sy, sz;<span class="hljs-comment">// body三维方向上的速度</span><br><span class="hljs-type">double</span> x, y, z;<span class="hljs-comment">// body三维方向上的位置</span><br><span class="hljs-type">double</span> fx, fy, fz;<span class="hljs-comment">// body三维方向上收到的力的总和</span><br><span class="hljs-built_in">planet</span>()<span class="hljs-comment">// 把所有数据初始化为0</span><br>&#123;<br>mass = sx = sy = sz = x = y = z = <span class="hljs-number">0</span>;<br>fx = fy = fz = <span class="hljs-number">0</span>;<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="2、计算引力（单线程）"><a href="#2、计算引力（单线程）" class="headerlink" title="2、计算引力（单线程）"></a>2、计算引力（单线程）</h2><p>计算一个星体收到其他星体力的总和，无非两两之间计算力然后更新。<br>例如1号星体和2号星体、1号和3号、1号和4号……1号和1024号，2号和3号、2号和4号……等等（注意，这里并不需要求2号和1号，因为在计算1号和2号时已经计算了力大小，只需要取反）。因为这个模块也会在后来的多线程中被调用，因此抽象成为一个单独的函数。为了减小误差，将每次计算的力存放到临时变量中，并且在更新完所有的合力之后，再更新星体的速度和位置。<br>不要一上来就写并行化，拿单线程的程序验证算法的正确性是一个好习惯。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">speed_change</span><span class="hljs-params">(planet &amp;a, planet &amp;b)</span></span>&#123;...&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">series_stimulus</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> count, planet *array)</span><span class="hljs-comment">// 单线程模块，count表示迭代多少次，array是计算使用的元数据。</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">while</span> (count--)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; max_size; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt; max_size; j++)<br>&#123;<br><span class="hljs-built_in">speed_change</span>(array[i], array[j]);<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; max_size; i++)<br>&#123;<br><span class="hljs-built_in">postion</span>(array[i]);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3、多线程优化"><a href="#3、多线程优化" class="headerlink" title="3、多线程优化"></a>3、多线程优化</h2><h3 id="a、openmp多线程"><a href="#a、openmp多线程" class="headerlink" title="a、openmp多线程"></a>a、openmp多线程</h3><p>有了上面单线程的计算方法，多线程就是把单线程的for，while等循环体并行化而已，openmp！！！简直没有比这个更加快捷的方法。逐个讲解pragma omp parallel带的参数。</p><ul><li>for : 表明并行化循环</li><li>num_threads(n) : 并行线程数量，n可以是任意整数，其实还是看配置</li><li>private(a,b,…,z) : 表明哪些变量是私有变量，不同线程之间不会相互干扰</li><li>shared(a,b,…,z) : 表明哪些变量是公有变量，不同线程之间共享，例如本题中星体数据就是共享的，并且能够更新</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">parallel_stimulus1</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> count, planet *array)</span><span class="hljs-comment">// openmp骞惰绋嬪簭</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> i, j;<br><span class="hljs-keyword">while</span> (count--)<br>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> omp parallel for num_threads(4) private(i, j) shared(array)</span><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; max_size; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (j = i + <span class="hljs-number">1</span>; j &lt; max_size; j++)<br>&#123;<br><span class="hljs-built_in">speed_change</span>(array[i], array[j]);<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; max_size; i++)<br>&#123;<br><span class="hljs-built_in">postion</span>(array[i]);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当然编译带有openmp的cpp文件需要在编译指令加入 -fopenmp 的参数，比如说你的文件叫做“a.cpp”那么编译参数就是：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">g++ a.cpp <span class="hljs-literal">-o</span> a.out <span class="hljs-literal">-fopenmp</span><br></code></pre></td></tr></table></figure><h3 id="b、pthread多线程"><a href="#b、pthread多线程" class="headerlink" title="b、pthread多线程"></a>b、pthread多线程</h3><p>如果说上面的openmp是自动多线程，那么pthread就是手动多线程。使用pthread创建新线程之前必须要为新线程分配空间，thread_handle就是这样一个容纳新线程的容器，然后使用new为它分配空间（这里因为笔者笔记本只有4个核心，因此只创建4线程）。有了容器之后要装东西，不然一个空的线程容器有什么用呢。调用pthread_create函数创建新线程：</p><ul><li>第一个参数是容器位置（也就是我们希望把这个新线程放在容器哪个位置）</li><li>第二个参数在这里没有用指定为NULL</li><li>第三个参数是函数指针（即希望在这个容器内运行什么），必须是void*类型</li><li>第四个参数是给函数使用的参数（这个容器内的函数总不可能完成无米之炊吧，所以米在哪里在这个位置告诉它）</li></ul><p>pthread不会帮我们实现线程同步，所以需要手动实现线程同步。这里使用pthread_join函数，将之前创建的多个线程合并，统一更新星体的速度和位置。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">parallel_stimulus2</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> count, planet *array)</span><span class="hljs-comment">// pthread主线程函数</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> num_of_thread = <span class="hljs-number">4</span>;<br>thread_set *set = <span class="hljs-keyword">new</span> thread_set[num_of_thread];<br><span class="hljs-type">pthread_t</span> *thread_handle = <span class="hljs-keyword">new</span> <span class="hljs-type">pthread_t</span>[num_of_thread];<br><span class="hljs-keyword">while</span> (count--)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> i = <span class="hljs-number">0</span>; i &lt; num_of_thread; i++)<br>&#123;<br>set[i].rank = i;<br>set[i].o = array;<br><span class="hljs-built_in">pthread_create</span>(&amp;thread_handle[i], <span class="hljs-literal">nullptr</span>, thread_pthread, (<span class="hljs-type">void</span> *)&amp;set[i]);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> i = num_of_thread<span class="hljs-number">-1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>&#123;<br><span class="hljs-built_in">pthread_join</span>(thread_handle[i], <span class="hljs-literal">nullptr</span>);<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; max_size; i++)<br>&#123;<br><span class="hljs-built_in">postion</span>(array[i]);<br>&#125;<br>&#125;<br><span class="hljs-keyword">delete</span>[] thread_handle;<br><span class="hljs-keyword">delete</span>[] set;<br><span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后是容器内容物要怎么办，因为要手动并行化，所以这个线程做什么也需要自己计算。本处举个🌰是4线程，每个线程计算1024个星体的四分之一。为了传递参数方便，使用结构体thread_set，其一是方便、其二是因为pthread_create第四个参数是一个指针（而不是一个指针的指针），不能传递多个参数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">thread_set</span> <span class="hljs-comment">// pthread参数表</span><br>&#123;<br><span class="hljs-type">int</span> rank;<span class="hljs-comment">// 指定的线程号</span><br>planet *o;<span class="hljs-comment">// 计算的元数据</span><br>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> *<span class="hljs-title">thread_pthread</span><span class="hljs-params">(<span class="hljs-type">void</span> *argv)</span><span class="hljs-comment">// pthread子线程函数</span></span><br><span class="hljs-function"></span>&#123;<br>thread_set set = *(thread_set *)argv;<br><span class="hljs-type">long</span> rank = set.rank;<br><span class="hljs-type">int</span> n = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">if</span> (rank == <span class="hljs-number">3</span>)<br>&#123;<br>n = max_size - <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>n = (rank + <span class="hljs-number">1</span>) * max_size / <span class="hljs-number">4</span>;<span class="hljs-comment">// 如果修改线程数，这里一并修改。</span><br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = rank * max_size / <span class="hljs-number">4</span>; i &lt; n; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt;= max_size; j++)<br>&#123;<br><span class="hljs-built_in">speed_change</span>(set.o[i], set.o[j]);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>为了能够使用pthread，需要在编译参数上增加“-lpthread”是“l”不是“i”。🌰同上。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">g++ a.cpp <span class="hljs-literal">-o</span> a.out <span class="hljs-literal">-lpthread</span><br></code></pre></td></tr></table></figure><h2 id="4、输入输出"><a href="#4、输入输出" class="headerlink" title="4、输入输出"></a>4、输入输出</h2><p>需要从文件中读入计算数据，然后将迭代结果输出到文件。此处比较推荐的是ofstream头文件提供的文件流功能。能够像cout、cin一样使用。</p><h3 id="a、文件读入"><a href="#a、文件读入" class="headerlink" title="a、文件读入"></a>a、文件读入</h3><p>使用前建立一个fstream文件流指针，调用open方法打开需要读入的文件。然后像使用cin一样使用fp即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">read</span><span class="hljs-params">(planet *array)</span></span><br><span class="hljs-function"></span>&#123;<br>fstream fp;<br>fp.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;nbody.txt&quot;</span>, ios::in);<br><span class="hljs-keyword">if</span> (fp.<span class="hljs-built_in">bad</span>())<span class="hljs-comment">// 检查文件是否存在</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;error to open file&quot;</span>;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; max_size; i++)<br>&#123;<br>fp &gt;&gt; array[i].mass &gt;&gt; array[i].x &gt;&gt; array[i].y &gt;&gt; array[i].z &gt;&gt; array[i].sx &gt;&gt; array[i].sy &gt;&gt; array[i].sz;<br>&#125;<br>fp.<span class="hljs-built_in">close</span>();<span class="hljs-comment">// 读写结束后关闭文件</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="b、文件输出"><a href="#b、文件输出" class="headerlink" title="b、文件输出"></a>b、文件输出</h3><p>一样，fstream也可以像cout一样使用，向文件写内容。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">write</span><span class="hljs-params">(planet *array, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *file)</span></span><br><span class="hljs-function"></span>&#123;<br>fstream fp;<br>fp.<span class="hljs-built_in">open</span>(file, ios::out);<br><span class="hljs-keyword">if</span> (fp.<span class="hljs-built_in">bad</span>())<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;output open error&quot;</span>;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; max_size; i++)<br>&#123;<br>fp &lt;&lt; <span class="hljs-built_in">setprecision</span>(<span class="hljs-number">15</span>) &lt;&lt; <span class="hljs-built_in">setiosflags</span>(ios::left) &lt;&lt; array[i].mass &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; array[i].x &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span><br>   &lt;&lt; array[i].y &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; array[i].z &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span><br>   &lt;&lt; array[i].sx &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; array[i].sy &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; array[i].sz &lt;&lt; endl;<br>&#125;<br>fp.<span class="hljs-built_in">close</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5、main函数"><a href="#5、main函数" class="headerlink" title="5、main函数"></a>5、main函数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">double</span> start, end;<br>planet array[max_size + <span class="hljs-number">16</span>];<br>planet copy_planet[max_size + <span class="hljs-number">16</span>];<br><span class="hljs-built_in">read</span>(array);<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> count = <span class="hljs-number">20</span>; <span class="hljs-comment">//迭代20次</span><br><span class="hljs-type">char</span> series[] = <span class="hljs-string">&quot;series version.txt&quot;</span>, parallel1[] = <span class="hljs-string">&quot;parallel version1.txt&quot;</span>, parallel2[] = <span class="hljs-string">&quot;parallel version2.txt&quot;</span>;<span class="hljs-comment">// 输出文件名</span><br><br><span class="hljs-built_in">memcpy</span>(copy_planet, array, max_size * <span class="hljs-built_in">sizeof</span>(planet)); <span class="hljs-comment">// 串行程序</span><br><span class="hljs-built_in">GET_TIME</span>(start);<br><span class="hljs-built_in">series_stimulus</span>(count, copy_planet);<br><span class="hljs-built_in">GET_TIME</span>(end)<br>cout &lt;&lt; (<span class="hljs-type">double</span>)(end - start) &lt;&lt; endl;<br><span class="hljs-comment">// 要写出如文件请去掉本行注释，下面同理</span><br><span class="hljs-comment">// write(copy_planet, series);</span><br><br><span class="hljs-built_in">memcpy</span>(copy_planet, array, max_size * <span class="hljs-built_in">sizeof</span>(planet)); <span class="hljs-comment">// openmp程序</span><br><span class="hljs-built_in">GET_TIME</span>(start);<br><span class="hljs-built_in">parallel_stimulus1</span>(count, copy_planet);<br><span class="hljs-built_in">GET_TIME</span>(end)<br>cout &lt;&lt; (<span class="hljs-type">double</span>)(end - start) &lt;&lt; endl;<br><span class="hljs-comment">// write(copy_planet, parallel1);</span><br><br><span class="hljs-built_in">memcpy</span>(copy_planet, array, max_size * <span class="hljs-built_in">sizeof</span>(planet)); <span class="hljs-comment">// pthread程序</span><br><span class="hljs-built_in">GET_TIME</span>(start);<br><span class="hljs-built_in">parallel_stimulus2</span>(count, copy_planet);<br><span class="hljs-built_in">GET_TIME</span>(end)<br>cout &lt;&lt; (<span class="hljs-type">double</span>)(end - start) &lt;&lt; endl;<br><span class="hljs-comment">// write(copy_planet, parallel2);</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="二、总结"><a href="#二、总结" class="headerlink" title="二、总结"></a>二、总结</h1><p>完整代码在这个地方<a href="https://github.com/peach-water/nbody_problem">连接</a>。</p>]]></content>
    
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>并行计算</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[搞笑]程序员笑话集收录</title>
    <link href="/2021/04/12/%E6%90%9E%E7%AC%91-%E7%A8%8B%E5%BA%8F%E5%91%98%E7%AC%91%E8%AF%9D%E9%9B%86%E6%94%B6%E5%BD%95/"/>
    <url>/2021/04/12/%E6%90%9E%E7%AC%91-%E7%A8%8B%E5%BA%8F%E5%91%98%E7%AC%91%E8%AF%9D%E9%9B%86%E6%94%B6%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="🕊"><a href="#🕊" class="headerlink" title="🕊"></a>🕊</h1><h2 id="起飞"><a href="#起飞" class="headerlink" title="起飞"></a>起飞</h2><p>当你乱写的程序它却碰巧完成了任务。来自Bilibili。恰好趁着这个机会，把之前零零散散的笑话都整理一下。</p><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=757297242&bvid=BV1w64y1Q7sk&cid=315369624&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe><h2 id="为什么它可以起飞"><a href="#为什么它可以起飞" class="headerlink" title="为什么它可以起飞"></a>为什么它可以起飞</h2><p>虽然不知道这只鸟为什么可以用头飞起来，但是总归是实现了功能。<br>等等、既然是用头飞的，那去掉翅膀应该没事。<br>凭什么去掉翅膀就不能飞了？你TM不是用头飞的！<br>凭什么把翅膀原封不动的放回去又不能飞了？我不是啥也没干啊？<br>艹！为什么这只鸟会用脚飞行，这是什么原理？我把脚去掉试试。<br>绝了，这鸟又能飞了！！而且正常的用翅膀飞行，虽然没有脚不能着陆。<br>等等，我上次好像做了一只鹰来着，把那个脚复制过来看看！</p><p>完美，现在这只鸽子又完美的飞行功能，并且可以正常的着陆，虽然脚是用鹰的脚凑合的，但是没问题！能用！我宣布！这个项目完工。♥</p><h2 id="能飞就不要动"><a href="#能飞就不要动" class="headerlink" title="能飞就不要动"></a>能飞就不要动</h2><p>是鸽子吗？<br>是！<br>能飞吗？<br>可以！<br>那不就完了😀</p><h2 id="CS班的合理想象"><a href="#CS班的合理想象" class="headerlink" title="CS班的合理想象"></a>CS班的合理想象</h2><p>如果你的鸽子这样子飞成功了，那么很有可能接下来的半个班都会这么飞，然后生出一些四条腿，三只翅膀的奇怪各自😀，另外半个班级可能造不出鸽子。</p><h2 id="为什么桌子要查字典"><a href="#为什么桌子要查字典" class="headerlink" title="为什么桌子要查字典"></a>为什么桌子要查字典</h2><p>你使用字典垫桌角，你走后下来一个人发现这个桌子需要使用字典，但是桌子并没有文字交互功能，而且桌子是不需要文字查询的。于是他把字典一抽，桌子翻了，菜撒了一地。但是他永远搞不懂为什么桌子要查字典。😀<br>然后他修理了一整天的BUG，研究桌子上的饭菜摆放位置对于桌子翻倒的影响，最后发现，只需要把一盘菜垫在桌角就可以了，然后潇洒离去，告诉别人今天他修了一个大BUG。后来又来了一个人检查这张桌子，他认为这张桌子不需要吃菜，于是把盘子抽了出来……把字典塞了回去。</p><h1 id="🍺吧"><a href="#🍺吧" class="headerlink" title="🍺吧"></a>🍺吧</h1><p>一个测试工程师走进一家酒吧，要了一杯啤酒。<br>一个测试工程师走进一家酒吧，要了一杯咖啡。<br>一个测试工程师走进一家酒吧，要了0.7杯啤酒。<br>一个测试工程师走进一家酒吧，要了-1杯啤酒。<br>一个测试工程师走进一家酒吧，要了2^32杯啤酒。<br>一个测试工程师走进一家酒吧，要了一杯洗脚水。<br>一个测试工程师走进一家酒吧，要了一杯蜥蜴。<br>一个测试工程师走进一家酒吧，要了一份asdfQwer@24多个！&amp;（@。<br>一个测试工程师走进一家酒吧，什么也没要。<br>一个测试工程师走进一家酒吧，又走出去又从窗户进来又从后门出去又从下水道进来。<br>一个测试工程师走进一家酒吧，又走出去又走进来又出去又进来又出去，最后在外面把老板打了一顿。<br>一个测试工程师走进一<br>一个测试工程师走进一家酒吧，要了一杯烫烫烫的锟斤拷。<br>一个测试工程师走进一家酒吧，要了NaN杯Null。<br>一Ｔ测试工程师冲进一家酒吧，要了500T啤酒咖啡洗脚水野猫狼牙棒奶茶。<br>一Ｔ测试工程师把酒吧拆了。<br>一个测试工程师换装成老板，要了500杯啤酒并且不付钱。<br>一万个测试工程师在酒吧门前呼啸而过。<br>一个测试工程师走进一家酒吧，要了一杯啤酒‘；DROP TABLE酒吧。<br>测试工程师们满意的离开了酒吧。<br>一名顾客点了一份炒饭，酒吧炸了。</p><h1 id="短合集"><a href="#短合集" class="headerlink" title="短合集"></a>短合集</h1><h2 id="乱码打油诗"><a href="#乱码打油诗" class="headerlink" title="乱码打油诗"></a>乱码打油诗</h2><p>手持两把锟斤拷，口中疾呼烫烫烫。<br>脚踏千朵屯屯屯，笑看万物诺诺诺。</p><h2 id="客户多样性"><a href="#客户多样性" class="headerlink" title="客户多样性"></a>客户多样性</h2><p>我以为的玩家：<br>老老实实打怪。老老实实刷怪。老老实实探险<br>实际上的玩家：<br>这个怪物中间有条缝。欸！我蹭到宝箱了。<br>我把这个怪物带到村庄会怎么样。<br>我拿到宝箱的时候立刻关了游戏然后换一个上线是不是就可以白嫖一份。<br>……</p><h2 id="Jeff-Dean"><a href="#Jeff-Dean" class="headerlink" title="Jeff Dean"></a>Jeff Dean</h2><ul><li>代码作为文档使用，提交的只有二进制文件</li><li>键盘只有0和1</li><li>提交前会验证性的编译一次</li><li>编译期间会警告编译器，而不是编译器给出警告</li><li>顺便检查编译器有没有Bug</li><li>每天打开邮箱，检查今天请求gcc -O4优化的代码</li><li>精力有限，所以算法通常优化到O(1&#x2F;n)</li><li>仅有的失手是旅行商问题，优化到O(n^2)</li><li>被迫使用异步API，因为优化过的函数会在被调用前返回</li><li>偶尔手动接管Google挂掉的服务器，期间用户满意度翻倍</li></ul><h2 id="程序员的读书历程"><a href="#程序员的读书历程" class="headerlink" title="程序员的读书历程"></a>程序员的读书历程</h2><p>x语言入门-&gt;x语言应用实践-&gt;x语言高级编程-&gt;x语言的科学与艺术-&gt;编程之美-&gt;编程之道-&gt;编程之禅-&gt;颈椎病康复指南。</p><h2 id="C"><a href="#C" class="headerlink" title="C"></a>C</h2><p>还没上大学的时候，高三暑假，跑到家那边的图书馆想买传说中的C++的书，然后看到一本C#，我一看，嘿，这个++写的还挺有艺术的，重叠起来了，于是把C#买了回来……</p><h2 id="《桃花庵》"><a href="#《桃花庵》" class="headerlink" title="《桃花庵》"></a>《桃花庵》</h2><p>写字楼里写字间，写字间种程序员；程序人员写程序，又将程序换酒钱；酒醒只在屏前坐，酒醉还来屏下眠；酒醉酒醒日复日，屏前屏下年复年；但愿老死电脑间，不愿鞠躬老板前；奔驰宝马贵者趣，公交自行程序员；别人笑我太疯癫，我笑自己命太贱；但见满街漂亮妹，哪个归的程序员。</p><h2 id="对联"><a href="#对联" class="headerlink" title="对联"></a>对联</h2><p>上联：MYSQL明月三千里<br>下联：XHTML信号他妈烂</p><h2 id="伟大"><a href="#伟大" class="headerlink" title="伟大"></a>伟大</h2><p>传说有一位老外立志要当一位伟大的作家，什么时伟大的作家？他说：“我写的东西全世界都看得到！看完他们必定会歇斯底里！会火冒三丈！会痛苦万分！结果，他，成功了，他在微软公司负责写操作系统蓝屏时的报错提示信息。</p><h2 id="潜规则"><a href="#潜规则" class="headerlink" title="潜规则"></a>潜规则</h2><ul><li>了解&#x3D;听过名字</li><li>熟悉&#x3D;知道是啥</li><li>熟练&#x3D;用过</li><li>精通&#x3D;做过东西</li></ul><h1 id="程序员对BUG反应"><a href="#程序员对BUG反应" class="headerlink" title="程序员对BUG反应"></a>程序员对BUG反应</h1><h2 id="直接怼"><a href="#直接怼" class="headerlink" title="直接怼"></a>直接怼</h2><ol><li>绝对不可能；</li><li>在我这里是好的，不行你过来看；</li><li>真是奇怪，刚才还是好好的；</li><li>你清理下缓存试试；</li><li>重启电脑试试；</li><li>你用的什么版本的库？</li><li>尼玛怎么还在使用某某安全浏览器。</li></ol><h2 id="报BUG的礼仪"><a href="#报BUG的礼仪" class="headerlink" title="报BUG的礼仪"></a>报BUG的礼仪</h2><ul><li>不要对一个程序员直接说：你的BUG有代码。不然第一反应是：1、一定是你的环境有问题；2、sb你会用吗？</li><li>如果委婉的说：你的程序和我预期的有点不一致，你看看是不是我的使用方法有问题（走程序员的路让程序员无路可走）。他就会本能的想：是不是出BUG了。</li></ul><h2 id="程序员的核心竞争力是什么？为什么？"><a href="#程序员的核心竞争力是什么？为什么？" class="headerlink" title="程序员的核心竞争力是什么？为什么？"></a>程序员的核心竞争力是什么？为什么？</h2><p>“玩算法的码农，打拼靠蓝条，像是法师。数学就等于蓝条最大值，数学差，魔法值不高，很快就到瓶颈了。外语影响回蓝速度。经验和智力加急速和穿透。不玩算法的码农，像是战士，打拼靠血条、体制加生命，精神加生命恢复，经验和敏捷加急速和破甲。”</p><h2 id="那些老鸟程序员直到而新手程序员不知道的小技巧？"><a href="#那些老鸟程序员直到而新手程序员不知道的小技巧？" class="headerlink" title="那些老鸟程序员直到而新手程序员不知道的小技巧？"></a>那些老鸟程序员直到而新手程序员不知道的小技巧？</h2><p>程序不等于数据结构加算法，而等于搜索引擎加英语。</p><h1 id="孔乙己"><a href="#孔乙己" class="headerlink" title="孔乙己"></a>孔乙己</h1><p>互联网的格局，是和别处不同的：都是格子衫，稀疏的头发，双肩包，男。</p><p>写代码的人，傍午傍晚散了工，每每三俩人，背着手，沿着软件园溜啦一圈。</p><p>倘若肯花点钱，便还会走到星巴克，买一杯咖啡，那样便再能多模几分钟的🐟。</p><p>我从十九岁起，便在软件园打工，老板说，看着还算清秀，就让我去收银。</p><p>我从此便成为了收银员。</p><p>老板是一副凶面孔，顾客们说话也很小声，教人活泼不得。</p><p>只有孔乙己到店，才可以笑几声，所以才记得。</p><p>孔乙己是穿着格子衫，背着双肩包，头发已经几乎没有的人。</p><p>他身材高大，青白脸色，皱纹间时常夹些伤痕。</p><p>一部乱蓬蓬的稀疏的头发，出啊的虽是格子衫，也是又脏又破，似乎十多年没有补，也没有洗。</p><p>他对人说话，总是满口闭环、打法、倒逼、落地。</p><p>教人半懂不懂的。</p><p>因为他姓孔，别人便从描红纸上的“上大人孔乙己”这半懂不懂的话里，替他取下一个外号，叫做孔乙己。</p><p>孔乙己一到店，所有顾客便都看着他笑，有的叫道：“孔乙己，你又写了新的BUG！”</p><p>他不回答，对我说：“一杯摩卡星冰乐，中杯。”</p><p>便摸出35块零钱。</p><p>他们又故意高声嚷道，“你一定又搞出资损了！”</p><p>孔乙己睁大眼睛说，“你怎么这样凭空污人清白……”</p><p>“什么清白，我前天亲眼看见你背了故障，被老板骂。”</p><p>孔乙己便涨红了脸，额头上的青筋条条绽出，争辩道，“同时发布10个服务……10个服务！发布失败没有及时回滚……，这能算故障？”</p><p>接着便是难懂的话，什么“方法论”，什么“组合拳”之类，引得众人都哄笑起来。</p><p>店内店外充满了快活的空气。</p><p>听人家背地里谈论，孔乙己原来当过领导，但是最终还是倒闭了。</p><p>于是人到了中年，愈过愈穷，弄到将要讨饭了。</p><p>幸而代码写的还不错，便进了一家创业公司，混口饭吃。</p><p>可惜他又有一样坏脾气，便是情商不高。</p><p>经常做不到几天，便得罪老板。</p><p>如是几次，工作便难找了。</p><p>孔乙己没有法，便免不了偶然做些外包的事。</p><p>但他在这里，品行却比别人都好，就是从不拖欠。</p><p>虽然间或没有现钱，暂时记在账上，但不出一个月，定然还清，从账上拭去孔乙己的名字。</p><p>孔乙己喝过半杯咖啡，涨红的脸色渐渐复原，旁人便又问道，孔乙己，你当真当过领导吗？</p><p>孔乙己看着问他的人，显出不屑置辩的神气。</p><p>他们便接着问道，“你怎的连个二线公司也进不去呢？”</p><p>孔乙己立刻显出颓唐不安的模样，脸上笼罩了一层灰色，嘴里说些话。</p><p>这回可是全是“价值转化”，“结果导向”之类，完全听不懂了。</p><p>在这时候，众人也就哄笑起来，店内店外充满了快活的空气。</p><p>在这些时候，我可以附和着笑，老板是决不责备的。</p><p>而且老板见了孔乙己，也每每这样问他，引人发笑。</p><p>孔乙己自己知道不能和他们谈天，便只好向孩子说话。</p><p>有一回对我说道，“你看过《Java编程思想》么？”</p><p>我略略点一点头。</p><p>他说，“读过，……我便考你一考。怎么能赋能新产品？”</p><p>我想，讨饭一样的人，也配考我吗？</p><p>便回过脸去，不再理会。</p><p>孔乙己等了许久，很恳切的说到，“不会罢？……我教给你，记着！这样做，将来做领导的时候，要用。”</p><p>我暗想我还在星巴克打工，只是个收银员而已，而且我们这里也不需要程序员，更不需要领导。</p><p>又好笑，又不耐烦，懒懒的回答，“谁要你教，不就是打通信息屏障，聚焦用户感知赛道，复用打法达成持久收益，抽离透传归因分析，最后作为抓手为产品赋能吗？”</p><p>孔乙己显出极为高兴的样子，将两个指头的长指甲敲着柜台，点头说，“对呀对呀！……赋能还有4种方式，你知道么？”</p><p>我愈不耐烦了，努着嘴走远。</p><p>孔乙己刚打开电脑，先看看CSDN，见我毫不热心，便又叹一口气，显出极惋惜的样子。</p><p>有几回，旁边的孩子听得笑声，也赶热闹，围住孔乙己。</p><p>他便教他们方法论。</p><p>孩子听不懂，但是仍然不散，眼睛看着他的咖啡杯。</p><p>孔乙己着了慌，伸开五指将咖啡罩住，弯下腰去说道，“不多了，我已经不多了。”</p><p>直起身又看一看，自己摇头说，“不多不多，多乎哉！不多也。”</p><p>于是这一群孩子都在笑声里走散了。</p><p>孔乙己是这样的使人快活，可是没有他，别人也就这么过。</p><p>有一天，大约是中秋前的两三天，老板正在慢慢的算账，忽然说，“孔乙己长久没有来了。还欠十九块钱呢！”</p><p>我也才觉得他的确长久没有来了。</p><p>一个喝酒的人说到，“他怎么来？……他失业很久了。”</p><p>掌柜说，“哦！”</p><p>“他总仍旧加班。这一回，是自己发昏，竟怼到CEO头上了。他一个P5，得罪的起么？”</p><p>“后来怎么样？”</p><p>“怎么样？先写检讨，后来是通报批评，最后被辞退，连赔偿都没有。”</p><p>“后来呢？”</p><p>“怎样？……谁晓得？许是回老家了。”</p><p>老板也不再问，仍然慢慢的算他的账。</p><p>中秋之后，秋风是一天凉比一天，看看将近初冬，虽然店里整天开着空调，也须穿上棉袄了。</p><p>一天的下半天，没有一个顾客，我正合眼坐着。</p><p>忽然间听得一个声音，“一杯摩卡。”</p><p>这声音虽然低，却很耳熟。</p><p>看时又没有人，站起来向外一望，那孔乙己便在柜台下对了门槛坐着。</p><p>他脸上黑而且瘦，已经不成样子。</p><p>穿一件破棉袄，盘着两腿，下面铺了一个蒲团，用麻绳在肩上挂住。</p><p>见了我，又说道，“一杯摩卡。”</p><p>老板也伸出头去，一面说，“孔乙己么？你还欠着十九块钱呢！”</p><p>孔乙己很颓唐的仰面答道，“这……下回还清罢。这一回是现金，咖啡不要加冰。”</p><p>掌柜仍然和平常一样，笑着对他说，“孔乙己，你又骂领导课！”</p><p>但他这回却不十分分辨，单说了一句“不要取笑！”</p><p>“取笑？要是不骂人，怎么被开除了？”</p><p>孔乙己低声说道，“辞职、辞职、辞……”</p><p>他的眼色，很像恳求老板，不要再提。</p><p>此时已经聚集了几个人，便和老板都笑了。</p><p>我拿着咖啡，端出去，放在门槛上。</p><p>他从破衣口袋里摸出一些零钱，放在我手里，见他满手是灰，原来他是便用这手走来的。</p><p>不一会，又长久没有见到孔乙己。</p><p>到了年关，老板说，“孔乙己还欠着十九块钱呢！”</p><p>到了第二年的端午，又说，“孔乙己还欠十九块钱呢！”</p><p>到中秋可是没有说，再到年关也没有看见他。</p><p>我到现在终于见——大约孔乙己的确回老家了。</p><h1 id="mian-or-main"><a href="#mian-or-main" class="headerlink" title="mian or main"></a>mian or main</h1><p>为什么我写代码时总是会手滑把main打成mian？<br>因为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;thread&gt;</span></span><br><br><span class="hljs-type">void</span> 左手()&#123;<br><span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;a&#x27;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> 右手()&#123;<br><span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;m&#x27;</span>);<br><span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;i&#x27;</span>);<br><span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;n&#x27;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>std::thread 左手线程(左手);<br>std::thread 右手线程(右手);<br>   右手线程.<span class="hljs-built_in">join</span>();<br>   左手线程.<span class="hljs-built_in">join</span>();<br>   <br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>搞笑</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[学习]多线程锁</title>
    <link href="/2021/04/11/%E5%AD%A6%E4%B9%A0-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%94%81/"/>
    <url>/2021/04/11/%E5%AD%A6%E4%B9%A0-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%94%81/</url>
    
    <content type="html"><![CDATA[<h1 id="信号量使用"><a href="#信号量使用" class="headerlink" title="信号量使用"></a>信号量使用</h1><p>在多线程条件下，完成对🥧的计算。实验提供有单线程版本，要求进行修改，并在代码空白处实现多线程计算。学习使用信号量，防止在多线程计算最终结果时出错。</p><h2 id="一、原理"><a href="#一、原理" class="headerlink" title="一、原理"></a>一、原理</h2><p>利用级数的思想，将计算过程分为多个线程，每个线程计算🥧的一部分，最后将结果相加。<br>$$<br>\pi&#x3D;4\times (1-\frac{1}{3}+\frac{1}{5}-\frac{1}{7}+\frac{1}{9}-…)<br>$$<br>求🥧的问题是一个累加问题，不同线程计算自己的项数和，然后输出汇总到一个解上，这里限定为一块共享内存。<br>因为不同的线程运行速度有快有慢，如果碰上两个线程对同一个共享内存进行加法操作，就会出现计算错误，为此需要引入信号量sem_t。</p><p><code>sem_t</code>的基本使用方法如下。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;semaphore&gt;</span># 引入这个库</span><br><br><span class="hljs-type">sem_t</span> sem# 新建一个信号量<br><span class="hljs-built_in">sem_init</span>(&amp;sem ,<span class="hljs-number">0</span> ,<span class="hljs-number">1</span>)# 在main中调用将信号量初始化为<span class="hljs-number">1</span><br><span class="hljs-built_in">sem_wait</span>(&amp;sem)# 在进入临界区之前，等待锁释放<br><span class="hljs-built_in">sem_post</span>(&amp;sem)# 临界区代码运行完毕后释放掉信号量<br><span class="hljs-built_in">sem_destory</span>(&amp;sem)# 在主线程运行结束后，调用释放掉信号量<br></code></pre></td></tr></table></figure><h2 id="二、源代码"><a href="#二、源代码" class="headerlink" title="二、源代码"></a>二、源代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;semaphore.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/time.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> GET_TIME(now)                         \</span><br><span class="hljs-meta">   &#123;                                          \</span><br><span class="hljs-meta">      struct timeval t;                       \</span><br><span class="hljs-meta">      gettimeofday(&amp;t, NULL);                 \</span><br><span class="hljs-meta">      now = t.tv_sec + t.tv_usec / 1000000.0; \</span><br><span class="hljs-meta">   &#125;</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAX_THREADS = <span class="hljs-number">1024</span>;<br><br><span class="hljs-type">long</span> thread_count;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> n;<br><span class="hljs-type">double</span> sum;<br><br><span class="hljs-type">sem_t</span> sem;<br><br><span class="hljs-function"><span class="hljs-type">void</span> *<span class="hljs-title">Thread_sum</span><span class="hljs-params">(<span class="hljs-type">void</span> *rank)</span></span>;<br><br><span class="hljs-comment">/* Only executed by main thread */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Get_args</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Usage</span><span class="hljs-params">(<span class="hljs-type">char</span> *prog_name)</span></span>;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">Serial_pi</span><span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">long</span> n)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-type">long</span> thread; <span class="hljs-comment">/* Use long in case of a 64-bit system */</span><br>   <span class="hljs-type">pthread_t</span> *thread_handles;<br>   <span class="hljs-type">double</span> start, finish, elapsed;<br><br>   <span class="hljs-comment">/* please choose terms &#x27;n&#x27;, and the threads &#x27;thread_count&#x27; here. */</span><br>   n = <span class="hljs-number">10000000000</span>;<span class="hljs-comment">// 控制计算项数</span><br>   thread_count = <span class="hljs-number">4</span>;<span class="hljs-comment">// 线程数</span><br><br>   <span class="hljs-comment">/* You can also get number of threads from command line */</span><br>   <span class="hljs-comment">//Get_args(argc, argv);</span><br><br>   thread_handles = (<span class="hljs-type">pthread_t</span> *)<span class="hljs-built_in">malloc</span>(thread_count * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">pthread_t</span>));<br>   <span class="hljs-built_in">sem_init</span>(&amp;sem, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>   sum = <span class="hljs-number">0.0</span>;<br><br>   <span class="hljs-built_in">GET_TIME</span>(start);<br>   <span class="hljs-keyword">for</span> (thread = <span class="hljs-number">0</span>; thread &lt; thread_count; thread++)<br>      <span class="hljs-built_in">pthread_create</span>(&amp;thread_handles[thread], <span class="hljs-literal">NULL</span>,<br>                     Thread_sum, (<span class="hljs-type">void</span> *)thread);<br><br>   <span class="hljs-keyword">for</span> (thread = <span class="hljs-number">0</span>; thread &lt; thread_count; thread++)<br>      <span class="hljs-built_in">pthread_join</span>(thread_handles[thread], <span class="hljs-literal">NULL</span>);<br>   <span class="hljs-built_in">GET_TIME</span>(finish);<br>   elapsed = finish - start;<br><br>   sum = <span class="hljs-number">4.0</span> * sum;<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;With n = %lld terms,\n&quot;</span>, n);<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;   Our estimate of pi = %.15f\n&quot;</span>, sum);<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The elapsed time is %e seconds\n&quot;</span>, elapsed);<br>   <span class="hljs-built_in">GET_TIME</span>(start);<br>   sum = <span class="hljs-built_in">Serial_pi</span>(n);<br>   <span class="hljs-built_in">GET_TIME</span>(finish);<br>   elapsed = finish - start;<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;   Single thread est  = %.15f\n&quot;</span>, sum);<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The elapsed time is %e seconds\n&quot;</span>, elapsed);<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;                   pi = %.15f\n&quot;</span>, <span class="hljs-number">4.0</span> * <span class="hljs-built_in">atan</span>(<span class="hljs-number">1.0</span>));<br><br>   <span class="hljs-built_in">sem_destroy</span>(&amp;sem);<br>   <span class="hljs-built_in">free</span>(thread_handles);<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <span class="hljs-comment">/* main */</span><br><br><span class="hljs-comment">/*------------------------------------------------------------------*/</span><br><span class="hljs-function"><span class="hljs-type">void</span> *<span class="hljs-title">Thread_sum</span><span class="hljs-params">(<span class="hljs-type">void</span> *rank)</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-type">long</span> my_rank = (<span class="hljs-type">long</span> <span class="hljs-type">long</span>)rank;<br>   <span class="hljs-type">double</span> my_sum = <span class="hljs-number">0.0</span>;<br><br>   <span class="hljs-comment">/*******************************************************************/</span><br>   <span class="hljs-type">double</span> factor = <span class="hljs-number">1</span>;<br>   <span class="hljs-type">long</span> <span class="hljs-type">long</span> max_size = <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">if</span> (my_rank == <span class="hljs-number">3</span>)<span class="hljs-comment">// 平均分配计算量，最后一个线程计算剩余部分。</span><br>   &#123;<br>      max_size = n;<br>   &#125;<br>   <span class="hljs-keyword">else</span><br>   &#123;<br>      max_size = my_rank * n / <span class="hljs-number">4</span> + n / <span class="hljs-number">4</span>;<br>   &#125;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> <span class="hljs-type">long</span> i = my_rank * n / <span class="hljs-number">4</span>; i &lt; max_size; i++, factor = -factor)<br>   &#123;<br>      my_sum += factor / (<span class="hljs-number">2</span> * (i + my_rank) + <span class="hljs-number">1</span>);<br>   &#125;<br>   <span class="hljs-comment">//printf(&quot;%.15lf\n&quot;, my_sum);</span><br><br>   <span class="hljs-built_in">sem_wait</span>(&amp;sem);<span class="hljs-comment">// 等待锁</span><br>   sum += my_sum;<span class="hljs-comment">// 临界状态</span><br>   <span class="hljs-built_in">sem_post</span>(&amp;sem);<span class="hljs-comment">// 释放锁</span><br><br>   <span class="hljs-comment">/******************************************************************/</span><br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125; <span class="hljs-comment">/* Thread_sum */</span><br><br><span class="hljs-comment">/*------------------------------------------------------------------</span><br><span class="hljs-comment"> * Function:   Serial_pi</span><br><span class="hljs-comment"> * Purpose:    Estimate pi using 1 thread</span><br><span class="hljs-comment"> * In arg:     n</span><br><span class="hljs-comment"> * Return val: Estimate of pi using n terms of Maclaurin series</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">Serial_pi</span><span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">long</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-type">double</span> sum = <span class="hljs-number">0.0</span>;<br>   <span class="hljs-type">long</span> <span class="hljs-type">long</span> i;<br>   <span class="hljs-type">double</span> factor = <span class="hljs-number">1.0</span>;<br><br>   <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++, factor = -factor)<br>   &#123;<br>      sum += factor / (<span class="hljs-number">2</span> * i + <span class="hljs-number">1</span>);<br>   &#125;<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">4.0</span> * sum;<br><br>&#125; <span class="hljs-comment">/* Serial_pi */</span><br><br><span class="hljs-comment">/*------------------------------------------------------------------</span><br><span class="hljs-comment"> * Function:    Get_args</span><br><span class="hljs-comment"> * Purpose:     Get the command line args</span><br><span class="hljs-comment"> * In args:     argc, argv</span><br><span class="hljs-comment"> * Globals out: thread_count, n</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Get_args</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-keyword">if</span> (argc != <span class="hljs-number">3</span>)<br>      <span class="hljs-built_in">Usage</span>(argv[<span class="hljs-number">0</span>]);<br>   thread_count = <span class="hljs-built_in">strtol</span>(argv[<span class="hljs-number">1</span>], <span class="hljs-literal">NULL</span>, <span class="hljs-number">10</span>);<br>   <span class="hljs-keyword">if</span> (thread_count &lt;= <span class="hljs-number">0</span> || thread_count &gt; MAX_THREADS)<br>      <span class="hljs-built_in">Usage</span>(argv[<span class="hljs-number">0</span>]);<br>   n = <span class="hljs-built_in">strtoll</span>(argv[<span class="hljs-number">2</span>], <span class="hljs-literal">NULL</span>, <span class="hljs-number">10</span>);<br>   <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">0</span>)<br>      <span class="hljs-built_in">Usage</span>(argv[<span class="hljs-number">0</span>]);<br>&#125; <span class="hljs-comment">/* Get_args */</span><br><br><span class="hljs-comment">/*------------------------------------------------------------------</span><br><span class="hljs-comment"> * Function:  Usage</span><br><span class="hljs-comment"> * Purpose:   Print a message explaining how to run the program</span><br><span class="hljs-comment"> * In arg:    prog_name</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Usage</span><span class="hljs-params">(<span class="hljs-type">char</span> *prog_name)</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;usage: %s &lt;number of threads&gt; &lt;n&gt;\n&quot;</span>, prog_name);<br>   <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;   n is the number of terms and should be &gt;= 1\n&quot;</span>);<br>   <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;   n should be evenly divisible by the number of threads\n&quot;</span>);<br>   <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125; <span class="hljs-comment">/* Usage */</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>并行计算</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[学习]Socket套接字学习</title>
    <link href="/2021/03/22/%E5%AD%A6%E4%B9%A0-socket/"/>
    <url>/2021/03/22/%E5%AD%A6%E4%B9%A0-socket/</url>
    
    <content type="html"><![CDATA[<h1 id="socket套接字学习"><a href="#socket套接字学习" class="headerlink" title="socket套接字学习"></a>socket套接字学习</h1><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>计算机网络课程学习使用操作系统库socket库实现一个能够在局域网内收发消息的命令行程序。参考资料来主要自于网上的库用法教程，留下此文记录下学习的过程。</p><h2 id="二、介绍"><a href="#二、介绍" class="headerlink" title="二、介绍"></a>二、介绍</h2><p>socket套接字是计算机网络中应用层与TCP&#x2F;IP协议族通信的中间软件抽象层，它是一组接口。在设计模式中，Socket其实是一个API将复杂的TCP&#x2F;IP协议隐藏在socket接口后面，对于使用的用户来说，一组简单的接口就是全部，让Socket去组织数据，而用户自己只需要关心好传输的数据，对于怎么传输并不需要过多了解。</p><p>网络协议有分TCP和UDP两种协议，他们的作用都是收发数据包。唯一的不同是TCP面向连接，在收发数据包之前还有一个连接过程，只有建立连接之后才能发送数据包。而UDP并不需要这样一个过程，它可以做到只给一个地址，马上就能够发送，有急速发货那味了。<br>他们之间各有优劣。</p><table><thead><tr><th>协议类型</th><th>优点</th><th>缺点</th><th>主要用途</th></tr></thead><tbody><tr><td>UDP</td><td>可以很快发送数据</td><td>容易丢包，易受到网络波动影响</td><td>视频通话等对丢包不敏感，但是对延迟敏感的领域</td></tr><tr><td>TCP</td><td>稳定，不会丢包</td><td>发送数据慢，但是不会受到网络波动影响</td><td>文件传输，聊天等对丢包敏感的领域</td></tr></tbody></table><h2 id="三、使用"><a href="#三、使用" class="headerlink" title="三、使用"></a>三、使用</h2><h3 id="1、TCP客户端"><a href="#1、TCP客户端" class="headerlink" title="1、TCP客户端"></a>1、TCP客户端</h3><h2 id="以下教程基于Windows10环境。首先加入socket头文件库。在使用之前还需要初始化，按照以下的方式初始化链接库，在具体收发数据前调用。在一切准备妥当之后，建立第一个套接字。然后向服务器发送连接建立请求。成功建立连接后，可以使用send函数向服务器发送数据了。使用recv函数接收来自服务器的消息。使用完连接资源后应当及时调用套接字关闭函数，释放被占用的资源。"><a href="#以下教程基于Windows10环境。首先加入socket头文件库。在使用之前还需要初始化，按照以下的方式初始化链接库，在具体收发数据前调用。在一切准备妥当之后，建立第一个套接字。然后向服务器发送连接建立请求。成功建立连接后，可以使用send函数向服务器发送数据了。使用recv函数接收来自服务器的消息。使用完连接资源后应当及时调用套接字关闭函数，释放被占用的资源。" class="headerlink" title="以下教程基于Windows10环境。首先加入socket头文件库。在使用之前还需要初始化，按照以下的方式初始化链接库，在具体收发数据前调用。在一切准备妥当之后，建立第一个套接字。然后向服务器发送连接建立请求。成功建立连接后，可以使用send函数向服务器发送数据了。使用recv函数接收来自服务器的消息。使用完连接资源后应当及时调用套接字关闭函数，释放被占用的资源。"></a>以下教程基于Windows10环境。<br>首先加入socket头文件库。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Winsock2.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sindows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib, <span class="hljs-string">&quot;WS2_32.lib&quot;</span>)</span><br></code></pre></td></tr></table></figure><br>在使用之前还需要初始化，按照以下的方式初始化链接库，在具体收发数据前调用。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>WSADATA wsd;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">WSAStartup</span>(<span class="hljs-built_in">MAKEWORD</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>), &amp;wsd))<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;WSAStartup failed!\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>在一切准备妥当之后，建立第一个套接字。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++">SOCKET sock;<br>SOCKET sock = <span class="hljs-built_in">socket</span>(PF_INET, SOCK_STREAM, IPPROTO_TCP); \\ PF_INET指定连接协议族、SOCK_STREAM表明是一个TCP协议<br>addr.sin_family = AF_INET;\\<br>addr.sin_addr.S_un.S_addr = <span class="hljs-built_in">inet_addr</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>);\\指定服务器IP4地址<br>addr.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">1234</span>);\\服务器开放的监听端口<br></code></pre></td></tr></table></figure><br>然后向服务器发送连接建立请求。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">connect</span>(sock, (SOCKADDR *)&amp;sockAddr, <span class="hljs-built_in">sizeof</span>(SOCKADDR)<span class="hljs-number">+10</span>);<br></code></pre></td></tr></table></figure><br>成功建立连接后，可以使用<code>send</code>函数向服务器发送数据了。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">send</span>(sock, <span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-number">512</span>, <span class="hljs-number">0</span>);\\sock表明地址，“aaa”是发送的数据，<span class="hljs-number">512</span>是发送字符数量（当然可以使用<span class="hljs-keyword">sizeof</span>动态，但是这里就偷懒拉），<span class="hljs-number">0</span>是一个标识符，一般不动<br></code></pre></td></tr></table></figure><br>使用<code>recv</code>函数接收来自服务器的消息。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">recv</span>(sock, szBuffer, <span class="hljs-number">512</span>, <span class="hljs-number">0</span>);\\szBuffer是接受字缓冲区（就是收到的字符写到哪里），<br></code></pre></td></tr></table></figure><br>使用完连接资源后应当及时调用套接字关闭函数，释放被占用的资源。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">closesocket</span>(sock);<br></code></pre></td></tr></table></figure></h2><p>下面把代码组合成一个具备基础信息收发功能的程序。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib, <span class="hljs-string">&quot;ws2_32.lib&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;WinSock2.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">scmp</span><span class="hljs-params">(<span class="hljs-type">char</span> *a, <span class="hljs-type">char</span> *b)</span></span>&#123;<span class="hljs-comment">//</span><br>    <span class="hljs-keyword">if</span>(a[<span class="hljs-number">0</span>] == b[<span class="hljs-number">0</span>] &amp;&amp; a[<span class="hljs-number">1</span>] == b[<span class="hljs-number">1</span>] &amp;&amp; a[<span class="hljs-number">2</span>] == b[<span class="hljs-number">2</span>] &amp;&amp; a[<span class="hljs-number">3</span>] == b[<span class="hljs-number">3</span>])&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//初始化DLL</span><br>    WSADATA wsaData;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">WSAStartup</span>(<span class="hljs-built_in">MAKEWORD</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>), &amp;wsd))<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;WSAStartup failed!\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-comment">//创建套接字</span><br>    SOCKET sock = <span class="hljs-built_in">socket</span>(PF_INET, SOCK_STREAM, IPPROTO_TCP);<br>    <span class="hljs-comment">//向服务器发起请求</span><br>    sockaddr_in sockAddr;<br><br>    <span class="hljs-built_in">memset</span>(&amp;sockAddr, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(sockAddr)); <span class="hljs-comment">//每个字节都用0填充</span><br>    sockAddr.sin_family = PF_INET;<br>    sockAddr.sin_addr.s_addr = <span class="hljs-built_in">inet_addr</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>);<br>    sockAddr.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">1234</span>);<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">connect</span>(sock, (SOCKADDR *)&amp;sockAddr, <span class="hljs-built_in">sizeof</span>(SOCKADDR)<span class="hljs-number">+10</span>))<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;client connect error&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-built_in">closesocket</span>(sock);<br>        <span class="hljs-built_in">WSACleanup</span>();<br>        <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-built_in">send</span>(sock, <span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-number">512</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-comment">//接收服务器传回的数据</span><br>    <br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>    &#123;<br>        <span class="hljs-type">char</span> szBuffer[MAXBYTE] = &#123;<span class="hljs-number">0</span>&#125;;<br>        <br>        <span class="hljs-built_in">recv</span>(sock, szBuffer, MAXBYTE, <span class="hljs-number">0</span>);<br>        <span class="hljs-comment">//输出接收到的数据</span><br>        cout &lt;&lt; <span class="hljs-string">&quot;Message from server: \n&quot;</span> &lt;&lt; szBuffer &lt;&lt; endl &lt;&lt;<span class="hljs-string">&quot;------------------------------&quot;</span>&lt;&lt; endl;<br>        <span class="hljs-comment">// _sleep(50);</span><br>        cout &lt;&lt; <span class="hljs-string">&quot;input your massage: &quot;</span> &lt;&lt; endl;<br>        <span class="hljs-built_in">fgets</span>(szBuffer, <span class="hljs-number">512</span>, stdin);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">scmp</span>(szBuffer,<span class="hljs-string">&quot;exit&quot;</span>) )&#123;<span class="hljs-comment">//输入exit关闭连接</span><br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        cout &lt;&lt; <span class="hljs-string">&quot;-------------------------------&quot;</span> &lt;&lt; endl;<br>        cout &lt;&lt; endl;<br>        <span class="hljs-built_in">send</span>(sock, szBuffer, <span class="hljs-number">512</span>, <span class="hljs-number">0</span>);<br>    &#125;<br><br><br>    <span class="hljs-comment">//关闭套接字</span><br>    <span class="hljs-built_in">closesocket</span>(sock);<br>    <span class="hljs-comment">//终止使用 DLL</span><br>    <span class="hljs-built_in">WSACleanup</span>();<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、TCP服务器"><a href="#2、TCP服务器" class="headerlink" title="2、TCP服务器"></a>2、TCP服务器</h3><p>上面代码已经建立了一个具备信息收发能力的客户端，接下去写一个能够接受信息也可以发送信息进行交互的服务端程序。这个服务端程序的功能很简单，启动后接收来自客户端的socket连接，其余部分照抄来自客户端的部分。</p><h2 id="服务端开头于客户端相同，不同的是套接字的建立方式。接收来自客户端的连接。"><a href="#服务端开头于客户端相同，不同的是套接字的建立方式。接收来自客户端的连接。" class="headerlink" title="服务端开头于客户端相同，不同的是套接字的建立方式。接收来自客户端的连接。"></a>服务端开头于客户端相同，不同的是套接字的建立方式。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++">sockaddr_in sockAddr;                <br>sockAddr.sin_family = PF_INET;                       <br>sockAddr.sin_addr.s_addr = <span class="hljs-built_in">htonl</span>(INADDR_ANY);   \\表示绑定本机IP4地址 <br>sockAddr.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">1234</span>); <br><span class="hljs-built_in">bind</span>(Sock, (SOCKADDR *)&amp;Addr, <span class="hljs-built_in">sizeof</span>(SOCKADDR));\\把这个套接字绑定到服务器对应端口<br></code></pre></td></tr></table></figure><br>接收来自客户端的连接。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">SOCKET clntSock = <span class="hljs-built_in">accept</span>(Sock, (SOCKADDR *)&amp;Addr, &amp;nSize);<br></code></pre></td></tr></table></figure></h2><p>完整的服务端代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs c++"> <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib, <span class="hljs-string">&quot;ws2_32.lib&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;WinSock2.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">// #include &lt;sys/socket.h&gt;</span><br><span class="hljs-comment">// #include &lt;netinet/in.h&gt;</span><br><span class="hljs-comment">// #include &lt;arpa/inet.h&gt;</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    WSADATA wsaData;<br>    <span class="hljs-built_in">WSAStartup</span>(<span class="hljs-built_in">MAKEWORD</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>), &amp;wsaData);<br>    SOCKET Sock = <span class="hljs-built_in">socket</span>(PF_INET, SOCK_STREAM, IPPROTO_TCP);<br>    sockaddr_in sockAddr;<br>    <span class="hljs-built_in">memset</span>(&amp;sockAddr, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(sockAddr));           <br>    sockAddr.sin_family = PF_INET;               <br>    sockAddr.sin_addr.s_addr = <span class="hljs-built_in">htonl</span>(INADDR_ANY);      <br>    sockAddr.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">1234</span>); <br>    <br>    <span class="hljs-built_in">bind</span>(Sock, (SOCKADDR *)&amp;sockAddr, <span class="hljs-built_in">sizeof</span>(SOCKADDR)); <br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">listen</span>(Sock, SOMAXCONN) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;listen set error&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    SOCKADDR clntAddr;<br>    <span class="hljs-type">int</span> nSize = <span class="hljs-built_in">sizeof</span>(SOCKADDR);<br>    SOCKET clntSock = <span class="hljs-built_in">accept</span>(Sock, (SOCKADDR *)&amp;clntAddr, &amp;nSize);\\clntSock是收到的来自客户端地址，十分重要是之后发送数据依据<br>    <span class="hljs-keyword">if</span> (clntSock == SOCKET_ERROR)<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;error&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-built_in">closesocket</span>(clntSock);<br>        <span class="hljs-built_in">closesocket</span>(Sock);<br>        <span class="hljs-built_in">WSACleanup</span>();<br>        <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;OK to connect&quot;</span> &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-type">char</span> recv_buf[<span class="hljs-number">100</span>];<br>    <span class="hljs-type">int</span> recv_len = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        recv_len = <span class="hljs-built_in">recv</span>(clntSock, recv_buf, <span class="hljs-number">100</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span> (recv_len &lt; <span class="hljs-number">0</span>)<br>        &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;receive error !!&quot;</span> &lt;&lt; endl;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;message received&quot;</span> &lt;&lt; recv_buf &lt;&lt; endl;<br>        &#125;<br>        cout &lt;&lt; <span class="hljs-string">&quot;send out your message&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-type">char</span> send_buf[<span class="hljs-number">100</span>];<br>        cin &gt;&gt; send_buf;<br>        <span class="hljs-type">int</span> send_len = <span class="hljs-built_in">strlen</span>(send_buf);<br>        send_len = <span class="hljs-built_in">send</span>(clntSock, send_buf, <span class="hljs-number">100</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span> (send_len &lt; <span class="hljs-number">0</span>)<br>        &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;send out successfully &quot;</span> &lt;&lt; endl;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">closesocket</span>(clntSock);<br>    <span class="hljs-built_in">closesocket</span>(servSock);<br>    <span class="hljs-built_in">WSACleanup</span>();<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>总体来说实验还是非常轻松的，可以将服务端放到有公网IP的服务器上（完全没有安全措施就是了）。实现了一个非常简易的聊天室，尽管目前代码十分不完善，比如说只能在发送消息之后才能显示来自服务端的消息。</p><p>本文是windows下套接字使用的学习。</p>]]></content>
    
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[折腾]scoop</title>
    <link href="/2021/03/03/%E6%8A%98%E8%85%BE-scoop/"/>
    <url>/2021/03/03/%E6%8A%98%E8%85%BE-scoop/</url>
    
    <content type="html"><![CDATA[<h1 id="windows下好用的包管理器scoop"><a href="#windows下好用的包管理器scoop" class="headerlink" title="windows下好用的包管理器scoop"></a>windows下好用的包管理器scoop</h1><h2 id="一、scoop简介"><a href="#一、scoop简介" class="headerlink" title="一、scoop简介"></a>一、scoop简介</h2><p>Scoop是Windows的命令行安装程序，是一个强大的包管理工具。可以在github上找到其项目的相关信息，项目<a href="https://github.com/lukesampson/scoop">网址</a>。</p><p>安装的起因：在学习中如果要安装像gcc、git等一些需要手动配置相关参数的工具，需要先去官网下载安装程序，点击安装，之后还需要配置环境变量，不仅过程麻烦。而且工具多了之后整理起来也相当不容易，配置也很杂，整个电脑就像被污染了一样。不仅如此，在windows下配置一个能使用的GCC编译器和GDB调试器，能够不出各种奇奇怪怪的问题就已经是谢天谢地了。这时候就好羡慕隔壁的linux强大的apt包管理器，或者mac的homebrew。这时候scoop横空出世。安装scoop后，只需要在命令行输入简单的一串命令即可安装你想要的软件。比如我想安装gcc，只需要输入</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">scoop install gcc<br>scoop install gdb<br></code></pre></td></tr></table></figure><p>就能够帮我完成从安装到环境变量全部过程。从此告别百度为什么gcc命令出错。</p><h2 id="二、安装scoop"><a href="#二、安装scoop" class="headerlink" title="二、安装scoop"></a>二、安装scoop</h2><h3 id="1、要求"><a href="#1、要求" class="headerlink" title="1、要求"></a>1、要求</h3><ul><li>Windows 7 SP1 + &#x2F; Windows Server 2008+</li><li>Powershell 5 或者更高版本和.NET Framework 4.5或者更高版本</li><li>必须启用PowerShell，例如Set-ExecutionPolicy RemoteSigned -Scope CurrentUser</li><li>你能够正常（最好是快速）访问全球最大同性<a href="https://github.com/">交友网站</a></li></ul><h3 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h3><p>首先打开使用<strong>管理员身份</strong>打开PowerShell，在里面输入这条命令启用脚本：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">set-executionpolicy</span> remotesigned <span class="hljs-literal">-scope</span> currentuser<br></code></pre></td></tr></table></figure><p>| ⚠注意：如果C盘容量告急，先看第三小节如何迁移安装位置。<br>然后使用这条命令一键安装：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">iex</span> (<span class="hljs-built_in">new-object</span> net.webclient).downloadstring(<span class="hljs-string">&#x27;https://get.scoop.sh&#x27;</span>)<br>或者<br><span class="hljs-built_in">iwr</span> <span class="hljs-literal">-useb</span> get.scoop.sh | <span class="hljs-built_in">iex</span><br></code></pre></td></tr></table></figure><p>等命令执行结束后，输入以下指令测试能否正常使用<code>scoop</code>命令。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">scoop <span class="hljs-literal">-h</span><br></code></pre></td></tr></table></figure><p>如果出现了</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">PS</span> D:\hexo&gt; scoop <span class="hljs-literal">-h</span><br>Usage: scoop &lt;command&gt; [&lt;<span class="hljs-type">args</span>&gt;]<br><br>Available commands are listed below.<br><br><span class="hljs-built_in">Type</span> <span class="hljs-string">&#x27;scoop help &lt;command&gt;&#x27;</span> to get more help <span class="hljs-keyword">for</span> a specific command.<br><br>Command    Summary<br><span class="hljs-literal">-------</span>    <span class="hljs-literal">-------</span><br>alias      Manage scoop aliases<br>bucket     Manage Scoop buckets<br>cache      Show or <span class="hljs-built_in">clear</span> the download cache<br><span class="hljs-built_in">cat</span>        Show content of specified manifest.<br>checkup    Check <span class="hljs-keyword">for</span> potential problems<br>cleanup    Cleanup apps by removing old versions<br>config     Get or <span class="hljs-built_in">set</span> configuration values<br>create     Create a custom app manifest<br>depends    List dependencies <span class="hljs-keyword">for</span> an app, <span class="hljs-keyword">in</span> the order they will be installed<br>download   Download apps <span class="hljs-keyword">in</span> the cache folder and verify hashes<br>export     Exports installed apps, buckets (and optionally configs) <span class="hljs-keyword">in</span> JSON format<br>help       Show help <span class="hljs-keyword">for</span> a command<br>hold       Hold an app to disable updates<br>home       Opens the app homepage<br>import     Imports apps, buckets and configs from a Scoopfile <span class="hljs-keyword">in</span> JSON format<br>info       Display information about an app<br>install    Install apps<br>list       List installed apps<br>prefix     Returns the path to the specified app<br>reset      Reset an app to resolve conflicts<br>search     Search available apps<br>shim       Manipulate Scoop shims<br>status     Show status and check <span class="hljs-keyword">for</span> new app versions<br>unhold     Unhold an app to enable updates<br>uninstall  Uninstall an app<br>update     Update apps, or Scoop itself<br>virustotal Look <span class="hljs-keyword">for</span> app`s hash or url on virustotal.com<br>which      Locate a shim/executable (similar to <span class="hljs-string">&#x27;which&#x27;</span> on Linux)<br></code></pre></td></tr></table></figure><p>那么恭喜安装完成。安装到此结束。顺带一提，这个软件是默认安装到“C:\User\用户名\scoop\”底下的。而且在此下载安装的所有软件都会在这个目录的“\app\”底下。如果C盘空间多，那么安装结束。如果C盘空间不够，我们就还需要修改<code>scoop</code>默认安装位置。</p><h3 id="3、更改默认安装位置"><a href="#3、更改默认安装位置" class="headerlink" title="3、更改默认安装位置"></a>3、更改默认安装位置</h3><p>将scoop安装到自定义目录。需要在执行<code>scoop</code>的安装脚本之前执行。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$env:SCOOP</span>=<span class="hljs-string">&#x27;D:\Applications\Scoop&#x27;</span>   \\你的目录<br>[<span class="hljs-type">Environment</span>]::SetEnvironmentVariable(<span class="hljs-string">&#x27;SCOOP&#x27;</span>, <span class="hljs-variable">$env:SCOOP</span>, <span class="hljs-string">&#x27;User&#x27;</span>)<br></code></pre></td></tr></table></figure><p><code>scoop</code>安装软件的位置更改。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$env:SCOOP_GLOBAL</span>=<span class="hljs-string">&#x27;F:\GlobalScoopApps&#x27;</span> \\ 指定目录<br>[<span class="hljs-type">Environment</span>]::SetEnvironmentVariable(<span class="hljs-string">&#x27;SCOOP_GLOBAL&#x27;</span>, <span class="hljs-variable">$env:SCOOP_GLOBAL</span>, <span class="hljs-string">&#x27;Machine&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="三、使用方法"><a href="#三、使用方法" class="headerlink" title="三、使用方法"></a>三、使用方法</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>search</td><td>搜索软件</td></tr><tr><td>install</td><td>安装软件</td></tr><tr><td>update</td><td>更新软件和更新软件源</td></tr><tr><td>status</td><td>查看软件状态，是否有更新</td></tr><tr><td>uninstall</td><td>卸载软件</td></tr><tr><td>info</td><td>查看软件信息</td></tr><tr><td>home</td><td>查看软件主页</td></tr><tr><td>list</td><td>查看已安装的软件</td></tr><tr><td>cache</td><td>查看安装、更新时的缓存</td></tr><tr><td>virustotal</td><td>在virustotal.org上查看软件的哈希值</td></tr></tbody></table><h2 id="四、额外安排"><a href="#四、额外安排" class="headerlink" title="四、额外安排"></a>四、额外安排</h2><h3 id="1、使用国内源"><a href="#1、使用国内源" class="headerlink" title="1、使用国内源"></a>1、使用国内源</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">iwr</span> <span class="hljs-literal">-useb</span> https://gitee.com/glsnames/scoop<span class="hljs-literal">-installer</span>/raw/master/bin/install.ps1 | <span class="hljs-built_in">iex</span><br>scoop config SCOOP_REPO <span class="hljs-string">&#x27;https://gitee.com/glsnames/scoop-installer&#x27;</span><br>scoop update<br></code></pre></td></tr></table></figure><h3 id="2、添加其他软件库"><a href="#2、添加其他软件库" class="headerlink" title="2、添加其他软件库"></a>2、添加其他软件库</h3><p><code>scoop</code>自带软件库不包含大部分软件，所以需要添加其他软件库。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">scoop bucket add extras<br><span class="hljs-comment"># 如上添加的是官方维护的 extras 软件库</span><br>scoop update<br></code></pre></td></tr></table></figure><p>还有以下的软件库</p><ul><li>main</li><li>versions</li><li>java</li><li>dorado</li></ul><h2 id="五、为什么要强推包管理器"><a href="#五、为什么要强推包管理器" class="headerlink" title="五、为什么要强推包管理器"></a>五、为什么要强推包管理器</h2><p>作为一个包管理器，最基础，也是最重要的功能就是安装软件。正在使用 Windows 的你一定在想：「为什么我要用它？为什么我不直接百度一下？」<br>当然可以。</p><ol><li>百度一下这个软件</li><li>然后在一堆奇奇怪怪的下载链接中徘徊</li><li>看到一个看上去最无毒，最没有捆绑的安装包</li><li>小心翼翼的避开流氓特性</li><li>选择一个合适的安装位置，防止到处拉屎</li></ol><p>好麻烦的安装！！！</p><p>Scoop 等一系列包管理器的诞生，第一大便利就是省去了上述繁琐的「搜索 - 下载 - 安装」的步骤，让我们能够通过「一行代码」急速安装。💪</p><p>同时，用Scoop来安装和管理我们的软件：</p><ul><li>集搜索、下载、安装、更新于一体；极大的降低了安装维护一个软件的成本，我们甚至不需要在软件复杂的菜单中找到更新按钮，也不会有烦人的弹窗提醒你更新。</li><li>将软件干干净净的安装到电脑的{用户文件夹}下：污染路径。</li><li>卸载软件也能够清空软件任何数据。</li><li>有一些必要但是安装不容易的软件例如<code>gdb</code>也能够一键解决。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>折腾</tag>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[学习]广州地铁线路规划大作业</title>
    <link href="/2020/12/07/%E5%AD%A6%E4%B9%A0-dijkstra/"/>
    <url>/2020/12/07/%E5%AD%A6%E4%B9%A0-dijkstra/</url>
    
    <content type="html"><![CDATA[<h1 id="Dijkstra算法应用"><a href="#Dijkstra算法应用" class="headerlink" title="Dijkstra算法应用"></a>Dijkstra算法应用</h1><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>起因是数据结构作业的期末作业，要求设计一个广州地铁线路规划程序。输入出发站点和目的站点，输出最短乘坐路径和换乘线路方法。</p><p>这项作业是对本学期所学的数据结构一个综合考验，比起Dijkstra算法，如何存储地铁线路图，如何将站点名称输出，如何存储图、建立图，如何将中文字符对应到一个可以计算使用的数字，以及线路的更新是本程序的重点。</p><h2 id="二、核心函数"><a href="#二、核心函数" class="headerlink" title="二、核心函数"></a>二、核心函数</h2><h3 id="1、站点名-数字的转换"><a href="#1、站点名-数字的转换" class="headerlink" title="1、站点名-&gt;数字的转换"></a>1、站点名-&gt;数字的转换</h3><p>广州地铁上的站点都是中文字符，很明显，中文字符无论是制作成邻接表还是邻接矩阵都是不合适的，因此需要一种方法，将广州地铁上上百个站点一一转换成计算机可以用来计算的数字。人工手动更换是绝对的不合适，先不说上百个站点的标记十分累人，更加重要的是这样的程序完全没有任何的可拓展性，它就不能适应新加的地铁站点。<br>所以，给站点打标记的活还是要交给计算机干，这里采用的方法是，将地铁站所有的站点和站点之间的线路权值存储在同一个文件中。存储方式如下所示，第一个字符表示是哪一条线路，第二个表示始发站，第三个字符串表示终点站，第四个数字表示边的权值。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">4 大学城北 大学城南 1<br>4 大学城南 …… 1<br></code></pre></td></tr></table></figure><p>然后是从上面的数据文件中建图，注意到这个图的邻接矩阵会是一个稀疏矩阵，采用邻接表的方法存储图。部分站点可能是换乘站，为减少换乘站带来的可能问题，此处选择给同名站点名称后添加字符加以区别，例如“万胜围”在4号线出现一次，那么在8号线出现的存储为“万胜围0”以此类推。但是在这样的处理方法会导致各条线路之间不连通，和真实的地铁线路不符合，所以在换乘站之间添加一条边权为0的边连通。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1 万胜围 万胜围0 0<br></code></pre></td></tr></table></figure><p>除此之外，还需要做三件事情，一个是给每一个站点赋予一个独特的id，用于程序计算；二是建立一个id到文本的映射，方便文本输出线路；三是建立一个文本到id的映射，方便将收到的出发站和终点站转换为内置id。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c++"> <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">subway_system::readData</span><span class="hljs-params">(vector&lt;edge&gt; &amp;edges)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// string a;</span><br><span class="hljs-comment">// cin &gt;&gt; a;</span><br><span class="hljs-function">ifstream <span class="hljs-title">fin</span><span class="hljs-params">(<span class="hljs-string">&quot;srcdata&quot;</span>)</span></span>;<br><span class="hljs-type">int</span> distance, ID[<span class="hljs-number">2</span>];<br>string line, station[<span class="hljs-number">2</span>];<br><br><span class="hljs-keyword">while</span> (fin &gt;&gt; line &gt;&gt; station[<span class="hljs-number">0</span>] &gt;&gt; station[<span class="hljs-number">1</span>] &gt;&gt; distance)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++)<br>&#123;<br><span class="hljs-keyword">auto</span> findStation = Stations.<span class="hljs-built_in">find</span>(station[i]);<br><span class="hljs-comment">//查找不到这个站点</span><br><span class="hljs-keyword">if</span> (findStation == Stations.<span class="hljs-built_in">end</span>())<br>&#123;<br>ID[i] = Stations.<span class="hljs-built_in">size</span>();<br>Stations[station[i]] = <span class="hljs-built_in">pair</span>&lt;string, <span class="hljs-type">int</span>&gt;(line, ID[i]);<br>station_name.<span class="hljs-built_in">push_back</span>(station[i]);<br>&#125;<br><span class="hljs-comment">//该站点在本线路上已经出现</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((*findStation).second.first == line)<br>ID[i] = Stations[station[i]].second;<br><span class="hljs-comment">//这是一个换乘站点</span><br><span class="hljs-keyword">else</span><br>&#123;<br>string it_name = station[i];<br><span class="hljs-type">char</span> c = <span class="hljs-string">&#x27;1&#x27;</span>;<br>station[i] += c;<br><span class="hljs-keyword">auto</span> it = Stations.<span class="hljs-built_in">find</span>(station[i]);<br><span class="hljs-keyword">while</span> (it != Stations.<span class="hljs-built_in">end</span>() &amp;&amp; (*it).second.first != line)<br>&#123;<br>station[i].<span class="hljs-built_in">back</span>() = ++c;<br>it = Stations.<span class="hljs-built_in">find</span>(station[i]);<br>&#125;<br><span class="hljs-keyword">if</span> (it == Stations.<span class="hljs-built_in">end</span>())<br>&#123;<br>ID[i] = Stations.<span class="hljs-built_in">size</span>();<br>Stations[station[i]] = <span class="hljs-built_in">pair</span>&lt;string, <span class="hljs-type">int</span>&gt;(line, ID[i]);<br>station_name.<span class="hljs-built_in">push_back</span>(station[i]);<br>&#125;<br><span class="hljs-keyword">else</span><br>ID[i] = Stations[station[i]].second;<br>edges.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">edge</span>(ID[i], Stations[it_name].second, <span class="hljs-number">0</span>));<span class="hljs-comment">//增加边权为0的边</span><br>&#125;<br>&#125;<br><br>edges.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">edge</span>(ID[<span class="hljs-number">0</span>], ID[<span class="hljs-number">1</span>], distance));<br>&#125;<br>n = edges.<span class="hljs-built_in">size</span>() + <span class="hljs-number">1</span>;<br>fin.<span class="hljs-built_in">close</span>();<br><span class="hljs-comment">//cout &lt;&lt; Stations.size() &lt;&lt; endl;</span><br><span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、节点存储"><a href="#2、节点存储" class="headerlink" title="2、节点存储"></a>2、节点存储</h3><p>地铁站点上是会有非常多的信息，比如说它在本程序中的id，方便Dijkstra算法必须的dis数据，bool类型的known，因此结构化为一个数据体</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">vertex</span><br>&#123;<br><span class="hljs-type">size_t</span> dis;<span class="hljs-comment">//最短路径算法使用</span><br><span class="hljs-type">int</span> id;<span class="hljs-comment">//在程序中的id</span><br><span class="hljs-type">int</span> path;<span class="hljs-comment">//父节点，输出从换乘线路使用</span><br><span class="hljs-type">bool</span> known;<span class="hljs-comment">//标记是否已经被搜索到</span><br><span class="hljs-type">bool</span> popped;<span class="hljs-comment">//输出线路使用</span><br><span class="hljs-built_in">vertex</span>() : <span class="hljs-built_in">dis</span>(inf), <span class="hljs-built_in">known</span>(<span class="hljs-literal">false</span>), <span class="hljs-built_in">popped</span>(<span class="hljs-literal">false</span>) &#123;&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="3、Dijkstra算法"><a href="#3、Dijkstra算法" class="headerlink" title="3、Dijkstra算法"></a>3、Dijkstra算法</h3><p>标准的Dijkstra算法。函数需要输出最短路径，所以返回一个记录最短路径走法的vector数组，记录从目的地前往始发点的最短路径。在输出线路之前需要考虑一个顺序的问题。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">subway_system::getShortestPath</span><span class="hljs-params">(<span class="hljs-type">int</span> origin, <span class="hljs-type">int</span> destination)</span></span><br><span class="hljs-function"></span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt; res;<br>set&lt;<span class="hljs-type">int</span>&gt; known;<br><span class="hljs-comment">//initialize</span><br>vector&lt;vertex&gt; nodes;<br>nodes.<span class="hljs-built_in">resize</span>(n);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; i &lt; nodes.<span class="hljs-built_in">size</span>(); i++)<br>&#123;<br>nodes[i].id = i;<br>nodes[i].path = i;<br>nodes[i].popped = <span class="hljs-literal">false</span>;<br>&#125;<br>nodes[origin].dis = <span class="hljs-number">0</span>;<br>nodes[origin].known = <span class="hljs-literal">true</span>;<br>nodes[origin].path = origin;<br>known.<span class="hljs-built_in">insert</span>(origin);<br><span class="hljs-comment">//calculating</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br><span class="hljs-type">int</span> index = <span class="hljs-number">0</span>, min_dis = inf;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;entry : known)<br><span class="hljs-keyword">if</span> (!(nodes[entry].popped) &amp;&amp; nodes[entry].dis &lt; min_dis)<br>&#123;<br>min_dis = nodes[entry].dis;<br>index = entry;<br>&#125;<br><span class="hljs-keyword">if</span> (index == destination)<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-comment">//cout &lt;&lt; station_name[index] &lt;&lt; &quot; &quot;;</span><br><br>nodes[index].popped = <span class="hljs-literal">true</span>;<br>vertex u = nodes[index];<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;entry : E[u.id])<br>&#123;<br><span class="hljs-keyword">if</span> (!nodes[entry.first].known)<br>&#123;<br><span class="hljs-keyword">if</span> (nodes[entry.first].dis &gt; nodes[u.id].dis + entry.second)<br>&#123;<br>nodes[entry.first].known = <span class="hljs-literal">true</span>;<br>known.<span class="hljs-built_in">insert</span>(entry.first);<br>nodes[entry.first].dis = nodes[u.id].dis + entry.second;<br>nodes[entry.first].path = u.id;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (nodes[destination].known == <span class="hljs-literal">false</span>)<br>&#123;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-comment">//get path</span><br>stack&lt;<span class="hljs-type">int</span>&gt; temp;<br><span class="hljs-type">int</span> cur = destination;<br>temp.<span class="hljs-built_in">push</span>(cur);<br><span class="hljs-keyword">while</span> (nodes[cur].path != origin)<br>&#123;<br>cur = nodes[cur].path;<br>temp.<span class="hljs-built_in">push</span>(cur);<br>&#125;<br>temp.<span class="hljs-built_in">push</span>(origin);<br><span class="hljs-keyword">while</span> (!temp.<span class="hljs-built_in">empty</span>())<br>&#123;<br>res.<span class="hljs-built_in">push_back</span>(temp.<span class="hljs-built_in">top</span>());<br>temp.<span class="hljs-built_in">pop</span>();<br>&#125;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4、输出结果"><a href="#4、输出结果" class="headerlink" title="4、输出结果"></a>4、输出结果</h3><p>在上一个函数获得了最短路径的id。但是id并不对应站点名，因此还需要一个输出函数，将一串数组转换为人可以看得懂的站点名称，并且还需要输出换乘信息。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">string <span class="hljs-title">subway_system::checkLine</span><span class="hljs-params">(string oringin, string destination)</span></span><br><span class="hljs-function"></span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt; result;<br>vector&lt;string&gt; output;<br>vector&lt;pair&lt;string,string&gt;&gt; transform;<br><span class="hljs-type">int</span> ori = <span class="hljs-keyword">this</span>-&gt;Stations[oringin].second;<br><span class="hljs-type">int</span> dest = <span class="hljs-keyword">this</span>-&gt;Stations[destination].second;<br>result = <span class="hljs-built_in">getShortestPath</span>(ori, dest);<br><span class="hljs-keyword">if</span> (result.<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;不存在这样一条道路&quot;</span> &lt;&lt; endl;<br>string a;<br><span class="hljs-keyword">return</span> a;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; result.<span class="hljs-built_in">size</span>(); i++)<br>&#123;<br>output.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">del_num</span>(station_name[result[i]]));<br><br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; result.<span class="hljs-built_in">size</span>();i++)&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">del_num</span>(station_name[result[i]]) == <span class="hljs-built_in">del_num</span>(station_name[result[i - <span class="hljs-number">1</span>]]) &amp;&amp; i &gt; <span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-function">pair&lt;string, string&gt; <span class="hljs-title">temp</span><span class="hljs-params">(Stations[station_name[result[i]]].first, Stations[station_name[result[i - <span class="hljs-number">1</span>]]].first)</span></span>;<br>transform.<span class="hljs-built_in">push_back</span>(temp);<br>&#125;<br>&#125;<br>cout &lt;&lt; output[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-string">&quot;-&gt;&quot;</span>;<br><span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>string all_in_one;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; output.<span class="hljs-built_in">size</span>(); i++)<br>&#123;<br><span class="hljs-keyword">if</span> (i == output.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>)<br>&#123;<br>all_in_one.<span class="hljs-built_in">append</span>( output[i]);<br>all_in_one.<span class="hljs-built_in">append</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (output[i] != output[i - <span class="hljs-number">1</span>])<br>&#123;<br>all_in_one.<span class="hljs-built_in">append</span>(output[i]);<br>all_in_one.<span class="hljs-built_in">append</span>(<span class="hljs-string">&quot;-&gt;&quot;</span>);<br><br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>all_in_one.<span class="hljs-built_in">append</span>(<span class="hljs-string">&quot;从&quot;</span>);<br>all_in_one.<span class="hljs-built_in">append</span>(transform[j].second);<br>all_in_one.<span class="hljs-built_in">append</span>(<span class="hljs-string">&quot;号线转到&quot;</span>);<br>all_in_one.<span class="hljs-built_in">append</span>(transform[j++].first);<br>all_in_one.<span class="hljs-built_in">append</span>(<span class="hljs-string">&quot;号线\n&quot;</span>);<br><br>&#125;<br>&#125;<br>cout &lt;&lt; all_in_one;<br><br>std::<span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> all_in_one;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5、建图的数据结构"><a href="#5、建图的数据结构" class="headerlink" title="5、建图的数据结构"></a>5、建图的数据结构</h3><p>上面所谓的建图，其实只是完成了边的读入，并没有建立一个邻接表，这段函数的目的就是从边建立一个可以被最短路径算法使用的邻接表</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">edge</span><span class="hljs-comment">//边的数据结构</span><br>&#123;<br><span class="hljs-type">int</span> u, v, w;<br><span class="hljs-built_in">edge</span>(<span class="hljs-type">int</span> U, <span class="hljs-type">int</span> V, <span class="hljs-type">int</span> W = inf) :<span class="hljs-built_in">u</span>(U), <span class="hljs-built_in">v</span>(V), <span class="hljs-built_in">w</span>(W) &#123;  &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">subway_system::makeGraph</span><span class="hljs-params">(vector&lt;edge&gt; &amp;edges)</span></span><br><span class="hljs-function"></span>&#123;<br>list&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; tmp;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = Stations.<span class="hljs-built_in">size</span>(); i--;)<span class="hljs-comment">//几条线路</span><br>E.<span class="hljs-built_in">push_back</span>(tmp);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;item : edges)<br>&#123;<br>E[item.u].<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;(item.v, item.w));<br>E[item.v].<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;(item.u, item.w));<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四、注意事项"><a href="#四、注意事项" class="headerlink" title="四、注意事项"></a>四、注意事项</h2><p>也就是尽量不要在window的终端上运行，或者在编译之前将<a href="https://github.com/peach-water/guangzhou_subway">源代码</a>转换为GBK编码，不然终端看见的只有一片乱码。</p><h2 id="五、鸣谢"><a href="#五、鸣谢" class="headerlink" title="五、鸣谢"></a>五、鸣谢</h2><p>本代码主要来自github上昊C和他的舍友大佬。最初的版本因为有一点点小问题，没有解决0权值边的问题，导致在测试的时候经常崩（后来查实是因为一直压栈最后爆内存了）。仔细排查才最后发现，原来是建图的时候，没有给换乘站一个他们之间连线，导致在输出的时候一直压栈，因为没有到达目的地。</p><p>如果也有类似大作业的需求，希望这份代码能帮到你。</p>]]></content>
    
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[学习]huffman压缩</title>
    <link href="/2020/11/01/%E5%AD%A6%E4%B9%A0-huffman/"/>
    <url>/2020/11/01/%E5%AD%A6%E4%B9%A0-huffman/</url>
    
    <content type="html"><![CDATA[<h2 id="初识Huffman"><a href="#初识Huffman" class="headerlink" title="初识Huffman"></a>初识Huffman</h2><p>简单说明Huffman编码的原理<br>　　实现霍夫曼编码的方式主要是创建一个二叉树和其节点。这些树的节点可以存储在数组里，数组的大小为符号（symbols）数的大小n，而节点分别是终端节点（叶节点）与非终端节点（内部节点）。</p><p>　　一开始，所有的节点都是终端节点，节点内有三个字段：</p><p>　　1.符号（Symbol）</p><p>　　2.权重（Weight、Probabilities、Frequency）</p><p>　　3.指向父节点的链接（Link to its parent node）</p><p>　　而非终端节点内有四个字段：</p><p>　　1.权重（Weight、Probabilities、Frequency）</p><p>　　2.指向两个子节点的 链接（Links to two child node）</p><p>　　3.指向父节点的链接（Link to its parent node）</p><p>　　基本上，我们用’0’与’1’分别代表指向左子节点与右子节点，最后为完成的二叉树共有n个终端节点与n-1个非终端节点，去除了不必要的符号并产生最佳的编码长度。</p><p>　　过程中，每个终端节点都包含着一个权重（Weight、Probabilities、Frequency），两两终端节点结合会产生一个新节点，新节点的权重是由两个权重最小的终端节点权重之总和，并持续进行此过程直到只剩下一个节点为止。</p><p>　　实现霍夫曼树的方式有很多种，可以使用优先队列（Priority Queue）简单达成这个过程，给与权重较低的符号较高的优先级（Priority），算法如下：</p><p>　　⒈把n个终端节点加入优先队列，则n个节点都有一个优先权Pi，1 ≤ i ≤ n</p><p>　　⒉如果队列内的节点数&gt;1，则：</p><p>　　　⑴从队列中移除两个最小的Pi节点，即连续做两次remove（min（Pi）, Priority_Queue)<br>　　　⑵产生一个新节点，此节点为（1）之移除节点之父节点，而此节点的权重值为（1）两节点之权重和<br>　　　⑶把（2）产生之节点加入优先队列中<br>　　⒊最后在优先队列里的点为树的根节点（root）<br>　　<br>　　而此算法的时间复杂度（ Time Complexity）为O（n log n）；因为有n个终端节点，所以树总共有2n-1个节点，使用优先队列每个循环须O（log n）。</p><p>　　此外，有一个更快的方式使时间复杂度降至线性时间（Linear Time）O（n），就是使用两个队列（Queue）创件霍夫曼树。第一个队列用来存储n个符号（即n个终端节点）的权重，第二个队列用来存储两两权重的合（即非终端节点）。此法可保证第二个队列的前端（Front）权重永远都是最小值，且方法如下：</p><p>　　⒈把n个终端节点加入第一个队列（依照权重大小排列，最小在前端）<br>　<br>　　⒉如果队列内的节点数&gt;1，则：</p><p>　　　⑴从队列前端移除两个最低权重的节点<br>　　　⑵将（1）中移除的两个节点权重相加合成一个新节点<br>　　　⑶加入第二个队列<br>　　⒊最后在第一个队列的节点为根节点</p><p>　　虽然使用此方法比使用优先队列的时间复杂度还低，但是注意此法的第1项，节点必须依照权重大小加入队列中，如果节点加入顺序不按大小，则需要经过排序，则至少花了O（n log n）的时间复杂度计算。</p><p>　　但是在不同的状况考量下，时间复杂度并非是最重要的，如果我们今天考虑英文字母的出现频率，变量n就是英文字母的26个字母，则使用哪一种算法时间复杂度都不会影响很大，因为n不是一个庞大的数字。</p><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><p>话不多说，直接上具体代码，这里仅展现部分核心代码。</p><h3 id="Huffman节点的定义"><a href="#Huffman节点的定义" class="headerlink" title="Huffman节点的定义"></a>Huffman节点的定义</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Hufnode</span>&#123;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Hufnode</span> *lc;<span class="hljs-comment">//左右子树</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Hufnode</span> *rc;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> pow;<span class="hljs-comment">//当前节点的权重</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> Data;<span class="hljs-comment">//这个节点如果是叶子结点，那么存储编码对应的字符</span><br>    <span class="hljs-type">bool</span> leaf;<span class="hljs-comment">//标记是否是字符</span><br>    string code;<span class="hljs-comment">//存储对应的Huffman编码</span><br>    <span class="hljs-built_in">Hufnode</span>() : <span class="hljs-built_in">lc</span>(<span class="hljs-literal">NULL</span>), <span class="hljs-built_in">rc</span>(<span class="hljs-literal">NULL</span>), <span class="hljs-built_in">leaf</span>(<span class="hljs-literal">true</span>)&#123;&#125;<span class="hljs-comment">//初始化节点</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Huffman树的构建"><a href="#Huffman树的构建" class="headerlink" title="Huffman树的构建"></a>Huffman树的构建</h3><p>根据开头介绍的两种方法，各有千秋，其中我们使用比较容易理解的方法，此处不使用优先队列等等优化性的算法，转向使用冒泡排序，因为排序的内容不算多，而且在第一次排序完成之后不会有较多的排序要求，我们可以通过对冒泡优化加快速度（使其变成一个插入算法）。</p><p>此处建立一个class类，实现Huffman树的构建和相关功能。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Hufman</span>&#123;<br><span class="hljs-keyword">private</span>:<br>    Hufnode * root<span class="hljs-comment">//记录下Huffman树的根节点</span><br>        map&lt;<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>, string&gt; code_map<span class="hljs-comment">//用来快速访问字符对应的Huffman编码</span><br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-built_in">Hufman</span>();<span class="hljs-comment">//构造函数，初始化Huffman树</span><br>        <span class="hljs-function">Hufnode *<span class="hljs-title">return_root</span><span class="hljs-params">()</span></span>;  <span class="hljs-comment">//获得当前Huffman树的根节点</span><br>        <span class="hljs-function"><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title">pow_len</span><span class="hljs-params">()</span></span>;    <span class="hljs-comment">//返回文件拥有的字符数量  </span><br>        <span class="hljs-function">string <span class="hljs-title">return_code</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> c)</span></span>;<span class="hljs-comment">//根据字符返回对应的Huffman编码  </span><br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">(Hufnode *root)</span></span>;    <span class="hljs-comment">//递归调用，解构函数</span><br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build_huf</span><span class="hljs-params">(Hufnode data[], <span class="hljs-type">int</span> size)</span></span>;<span class="hljs-comment">//构建Huffman树，输入的是节点数量和节点  </span><br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update_code</span><span class="hljs-params">(Hufnode *root, string fa, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *c)</span></span>;<span class="hljs-comment">//根据建立的Huffman树，递归给每一个字符生成Huffman编码  </span><br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bob_sort</span><span class="hljs-params">(Hufnode data[], <span class="hljs-type">int</span> size)</span></span>;<span class="hljs-comment">//优化过的冒泡排序  </span><br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码块展示的是 Huffman类的声明，声明的函数具体的实现自行完成。</p><h3 id="压缩函数的实现"><a href="#压缩函数的实现" class="headerlink" title="压缩函数的实现"></a>压缩函数的实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">zip</span><span class="hljs-params">(<span class="hljs-type">char</span> *input, <span class="hljs-type">char</span> *output)</span></span>&#123;<br>FILE *fp = <span class="hljs-literal">NULL</span>, *outfile = <span class="hljs-literal">NULL</span>;<span class="hljs-comment">//文件输入和输出</span><br>    byte_fre array[<span class="hljs-number">256</span>];<span class="hljs-comment">//用二进制方式读入文件，可以实现对所有格式文件兼容，开256个空间是因为只有256种不同的字节。</span><br>    Hufnode *data;<span class="hljs-comment">//Huffman建树的临时缓冲区</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> char_temp = <span class="hljs-number">0</span>;<span class="hljs-comment">//字节操作文件的缓冲区</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> code_len = <span class="hljs-number">0</span>;<span class="hljs-comment">//记录文件长度</span><br>    data = <span class="hljs-keyword">new</span> Hufnode[<span class="hljs-number">256</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">256</span>; i++)<br>        array[i].data = i;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> buffer[MAX_LINE]; <span class="hljs-comment">// MAX_LINE 是一个宏定义，代表缓冲区的大小，此处为1024</span><br>    buffer[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br><br></code></pre></td></tr></table></figure><p>在上面初始化zip压缩函数，然后开始读入文件，求解统计整个文件不同字节权值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">while</span> (!<span class="hljs-built_in">feof</span>(fp) &amp;&amp; <span class="hljs-built_in">fread</span>(buffer, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, fp))<br>&#123;<br>    <span class="hljs-type">int</span> a = buffer[<span class="hljs-number">0</span>];<br>    array[a].fre++;<span class="hljs-comment">//统计不同的字节权值</span><br>    buffer[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">int</span> len = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">256</span>; i++) <span class="hljs-comment">//搜集权值用来构建hafuman树 </span><br>&#123;<br>    <span class="hljs-keyword">if</span> (array[i].fre &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>        data[len].pow = array[i].fre;<br>        data[len].leaf = <span class="hljs-literal">true</span>;<br>        data[len++].Data = array[i].data;<br>    &#125;<br>&#125;<br>Hufman CODE;<br>CODE.<span class="hljs-built_in">build_huf</span>(data, len); <span class="hljs-comment">//此处调用hufman类里面的建树</span><br><br>len = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">256</span>; i++) <span class="hljs-comment">// 为了在元数据写入不同字节权重</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (array[i].fre &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>        data[len].pow = array[i].fre;<br>        data[len].leaf = <span class="hljs-literal">true</span>;<br>        data[len++].Data = array[i].data;<br>    &#125;<br>&#125;<br><br>outfile = <span class="hljs-built_in">fopen</span>(output, <span class="hljs-string">&quot;wb+&quot;</span>);<br><span class="hljs-built_in">fwrite</span>((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *)&amp;len, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>), <span class="hljs-number">1</span>, outfile);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>&#123;<br>    <span class="hljs-built_in">fwrite</span>((<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *)&amp;data[i].Data, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>), <span class="hljs-number">1</span>, outfile);<br>    <span class="hljs-built_in">fwrite</span>((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *)&amp;data[i].pow, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>), <span class="hljs-number">1</span>, outfile);<br>&#125;<br><br><span class="hljs-type">char</span> code_buf[<span class="hljs-number">256</span>] = <span class="hljs-string">&quot;\0&quot;</span>; <span class="hljs-comment">// </span><br><br><span class="hljs-built_in">rewind</span>(fp);<br><span class="hljs-type">int</span> file_len = CODE.<span class="hljs-built_in">pow_len</span>();<br><span class="hljs-built_in">fwrite</span>((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> *)&amp;file_len, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>), <span class="hljs-number">1</span>, outfile); <span class="hljs-comment">// 读取文件的大小</span><br><span class="hljs-built_in">fread</span>((<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *)&amp;char_temp, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>), <span class="hljs-number">1</span>, fp);      <span class="hljs-comment">// 按照字节读取8个bit</span><br><span class="hljs-type">int</span> temp = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (!<span class="hljs-built_in">feof</span>(fp))<br>&#123;<br><br>    <span class="hljs-built_in">strcat</span>(code_buf, CODE.<span class="hljs-built_in">return_code</span>(char_temp).<span class="hljs-built_in">data</span>());<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">strlen</span>(code_buf) &gt;= <span class="hljs-number">8</span>)<br>    &#123;<br>        char_temp = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; ++i)<br>        &#123;<br>            char_temp &lt;&lt;= <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (code_buf[i] == <span class="hljs-string">&#x27;1&#x27;</span>)<br>            &#123;<br>                char_temp |= <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">fwrite</span>((<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *)&amp;char_temp, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>), <span class="hljs-number">1</span>, outfile); <span class="hljs-comment">// 输出</span><br>        <span class="hljs-built_in">strcpy</span>(code_buf, code_buf + <span class="hljs-number">8</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">feof</span>(fp))<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-built_in">fread</span>((<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *)&amp;char_temp, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>), <span class="hljs-number">1</span>, fp); <span class="hljs-comment">// 读入文件数据</span><br>&#125;<br><br><span class="hljs-comment">// 处理最后不足8位的情况</span><br>code_len = <span class="hljs-built_in">strlen</span>(code_buf);<br><span class="hljs-keyword">if</span> (code_len &gt; <span class="hljs-number">0</span>)<br>&#123;<br>    <span class="hljs-built_in">memset</span>(&amp;char_temp, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(char_temp));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; code_len; ++i)<br>    &#123;<br>        char_temp &lt;&lt;= <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (code_buf[i] == <span class="hljs-string">&#x27;1&#x27;</span>)<br>            char_temp |= <span class="hljs-number">1</span>;<br>    &#125;<br>    char_temp &lt;&lt;= <span class="hljs-number">8</span> - code_len;                                            <span class="hljs-comment">// 移动到高位</span><br>    <span class="hljs-built_in">fwrite</span>((<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *)&amp;char_temp, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>), <span class="hljs-number">1</span>, outfile); <span class="hljs-comment">// </span><br>&#125;<br><span class="hljs-built_in">fclose</span>(fp);<br><span class="hljs-built_in">fclose</span>(outfile); <br><span class="hljs-keyword">delete</span>[] data;<br></code></pre></td></tr></table></figure><h3 id="解压函数"><a href="#解压函数" class="headerlink" title="解压函数"></a>解压函数</h3><p>下面是需要使用的临时变量：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">unzip</span><span class="hljs-params">(<span class="hljs-type">char</span> *input, <span class="hljs-type">char</span> *output)</span></span>&#123;<br>FILE *inputf=<span class="hljs-literal">NULL</span>, *outputf=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> len=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> file_len=<span class="hljs-number">0</span>;<span class="hljs-comment">//读入的文件大小</span><br>    Hufnode *root = <span class="hljs-literal">NULL</span>;<span class="hljs-comment">//临时指针</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> node_num=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> code_temp = <span class="hljs-number">0</span>; <span class="hljs-comment">// 缓冲区</span><br>    byte_fre array[<span class="hljs-number">256</span>];<span class="hljs-comment">//统计权重</span><br>    inputf = <span class="hljs-built_in">fopen</span>(input, <span class="hljs-string">&quot;rb&quot;</span>);<br>    outputf = <span class="hljs-built_in">fopen</span>(output, <span class="hljs-string">&quot;wb+&quot;</span>);<br><br></code></pre></td></tr></table></figure><p>然后是正式读取压缩的文件开始解压。（代码并没有验证解压文件是否是上述压缩算法生成的，而且是以字节流读取文件内容，所以任何文件都可以被这个函数读取并尝试解压）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">if</span> (inputf == <span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-built_in">fread</span>((<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *)&amp;len, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>), <span class="hljs-number">1</span>, inputf);<span class="hljs-comment">//先读取字符种类</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i; i &lt; len; i++)<br>    &#123;<br>        <span class="hljs-built_in">fread</span>((<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *)&amp;array[i].data, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>), <span class="hljs-number">1</span>, inputf);<br>        <span class="hljs-built_in">fread</span>((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *)&amp;array[i].fre, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>), <span class="hljs-number">1</span>, inputf);<br>    &#125;<br>    Hufnode data[<span class="hljs-number">256</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) <span class="hljs-comment">//collecting data to build huffman tree </span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (array[i].fre &gt; <span class="hljs-number">0</span>)<br>        &#123;<br>            data[i].pow = array[i].fre;<br>            data[i].leaf = <span class="hljs-literal">true</span>;<br>            data[i].Data = array[i].data;<br>        &#125;<br>    &#125;<br>    Hufman CODE;<br>    CODE.<span class="hljs-built_in">build_huf</span>(data, len);<span class="hljs-comment">//根据读入的字节权重重建huffman树</span><br><br>    <span class="hljs-built_in">fread</span>((<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *)&amp;file_len, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>), <span class="hljs-number">1</span>, inputf); <span class="hljs-comment">//读取文件大小</span><br>    root = CODE.<span class="hljs-built_in">return_root</span>();<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> writen_len = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>    <span class="hljs-built_in">fread</span>((<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *)&amp;code_temp, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>), <span class="hljs-number">1</span>, inputf); <span class="hljs-comment">//每次一个字节进行解压</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; ++i)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (code_temp &amp; <span class="hljs-number">128</span>)<br>                root = root-&gt;rc;<br>            <span class="hljs-keyword">else</span><br>                root = root-&gt;lc;<br><br>            <span class="hljs-keyword">if</span> (root-&gt;leaf == <span class="hljs-literal">true</span>)<br>            &#123;<br>                <span class="hljs-built_in">fwrite</span>((<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *)&amp;root-&gt;Data, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>), <span class="hljs-number">1</span>, outputf);<br>                ++writen_len;<br>                <span class="hljs-keyword">if</span> (writen_len &gt;= file_len)<br>                    <span class="hljs-keyword">break</span>;                 <span class="hljs-comment">// 跳出循环</span><br>                root = CODE.<span class="hljs-built_in">return_root</span>(); <span class="hljs-comment">// 恢复</span><br>            &#125;<br>            code_temp &lt;&lt;= <span class="hljs-number">1</span>; <span class="hljs-comment">// switch next bit to the highest</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (writen_len &gt;= file_len)<br>            <span class="hljs-keyword">break</span>;  <span class="hljs-comment">// 文件大小检测</span><br>    &#125;<br>    <span class="hljs-built_in">fread</span>((<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *)&amp;code_temp, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>), <span class="hljs-number">1</span>, inputf);<br><br>    <span class="hljs-comment">// close the file</span><br>    <span class="hljs-built_in">fclose</span>(inputf);<br>    <span class="hljs-built_in">fclose</span>(outputf);<br></code></pre></td></tr></table></figure><h3 id="main部分"><a href="#main部分" class="headerlink" title="main部分"></a>main部分</h3><p>这个东西就是需要根据实际情况编写，此处不再粘贴完整的代码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> input[<span class="hljs-number">100</span>] = &#123;<span class="hljs-number">0</span>&#125;, output[<span class="hljs-number">100</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">int</span> opcode = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>    &#123;<br>        <span class="hljs-built_in">welcome</span>();<br>        cin &gt;&gt; opcode;<br>        <span class="hljs-keyword">switch</span> (opcode)<span class="hljs-comment">//three cases</span><br>        &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<span class="hljs-comment">//zip</span><br>            cout &lt;&lt; <span class="hljs-string">&quot;Your file name of input&quot;</span> &lt;&lt; endl;<br>            cin &gt;&gt; input;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-built_in">file_name</span>(input) == <span class="hljs-literal">false</span>)<br>            &#123;<br>                cin &gt;&gt; input;<br>                <span class="hljs-keyword">if</span> (input[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; input[<span class="hljs-number">1</span>] == <span class="hljs-number">0</span>)<br>                &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>                &#125;<br>            &#125;<br>            cout &lt;&lt; <span class="hljs-string">&quot;Your file name of output&quot;</span> &lt;&lt; endl;<br>            cin &gt;&gt; output;<br>            <span class="hljs-built_in">zip</span>(input, output);<br>            cout &lt;&lt; <span class="hljs-string">&quot;Zip behaviour is complete&quot;</span> &lt;&lt; endl<br>                 &lt;&lt; endl;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<span class="hljs-comment">//unzip</span><br>            cout &lt;&lt; <span class="hljs-string">&quot;Your file name of input&quot;</span> &lt;&lt; endl;<br>            cin &gt;&gt; input;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-built_in">file_name</span>(input) == <span class="hljs-literal">false</span>)<br>            &#123;<br>                cin &gt;&gt; input;<br>                <span class="hljs-keyword">if</span> (input[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; input[<span class="hljs-number">1</span>] == <span class="hljs-number">0</span>)<br>                &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>                &#125;<br>            &#125;<br>            cout &lt;&lt; <span class="hljs-string">&quot;Your file name of output&quot;</span> &lt;&lt; endl;<br>            cin &gt;&gt; output;<br>            <span class="hljs-built_in">unzip</span>(input, output);<br>            cout &lt;&lt; <span class="hljs-string">&quot;Unzip behaviour is complete&quot;</span> &lt;&lt; endl<br>                 &lt;&lt; endl;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<span class="hljs-comment">//exit</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            cout &lt;&lt; <span class="hljs-string">&quot;Your Input is not allowed&quot;</span> &lt;&lt; endl;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="目前的问题"><a href="#目前的问题" class="headerlink" title="目前的问题"></a>目前的问题</h3><p>在代码注释中提及过，解压缩是不能够验证压缩的文件是否是Huffman压缩算法生成的，如果直接解压一个正常的文件，会解压出来一个压缩炸弹或者一个啥也没有。与之配套的压缩算法中也没有加入相应的验证程序。没有对单一字节类型进行特化处理，比如说，压缩一个文本全部是“a”的文本文件会丢失数据，因为在建立哈夫曼树的时候没有特化考虑只有一种字节类型的情况，之后修改加入。</p><h3 id="没了"><a href="#没了" class="headerlink" title="没了"></a>没了</h3><p>作下此文，只是记一次被迫从零开始完成一个数据结构作业，~<br>diss一下qhy。应该不会有人认出来吧。如果恰巧也是这个老师教学的，~</p>]]></content>
    
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
